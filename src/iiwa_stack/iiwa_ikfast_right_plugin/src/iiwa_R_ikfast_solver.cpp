/// autogenerated analytical inverse kinematics code from ikfast program part of OpenRAVE
/// \author Rosen Diankov
///
/// Licensed under the Apache License, Version 2.0 (the "License");
/// you may not use this file except in compliance with the License.
/// You may obtain a copy of the License at
///     http://www.apache.org/licenses/LICENSE-2.0
/// 
/// Unless required by applicable law or agreed to in writing, software
/// distributed under the License is distributed on an "AS IS" BASIS,
/// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
/// See the License for the specific language governing permissions and
/// limitations under the License.
///
/// ikfast version 0x10000049 generated on 2019-08-05 12:56:20.928763
/// To compile with gcc:
///     gcc -lstdc++ ik.cpp
/// To compile without any main function as a shared object (might need -llapack):
///     gcc -fPIC -lstdc++ -DIKFAST_NO_MAIN -DIKFAST_CLIBRARY -shared -Wl,-soname,libik.so -o libik.so ik.cpp
#define IKFAST_HAS_LIBRARY
#include "ikfast.h" // found inside share/openrave-X.Y/python/ikfast.h
using namespace ikfast;

// check if the included ikfast version matches what this file was compiled with
#define IKFAST_COMPILE_ASSERT(x) extern int __dummy[(int)x]
IKFAST_COMPILE_ASSERT(IKFAST_VERSION==0x10000049);

#include <cmath>
#include <vector>
#include <limits>
#include <algorithm>
#include <complex>

#ifndef IKFAST_ASSERT
#include <stdexcept>
#include <sstream>
#include <iostream>

#ifdef _MSC_VER
#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __FUNCDNAME__
#endif
#endif

#ifndef __PRETTY_FUNCTION__
#define __PRETTY_FUNCTION__ __func__
#endif

#define IKFAST_ASSERT(b) { if( !(b) ) { std::stringstream ss; ss << "ikfast exception: " << __FILE__ << ":" << __LINE__ << ": " <<__PRETTY_FUNCTION__ << ": Assertion '" << #b << "' failed"; throw std::runtime_error(ss.str()); } }

#endif

#if defined(_MSC_VER)
#define IKFAST_ALIGNED16(x) __declspec(align(16)) x
#else
#define IKFAST_ALIGNED16(x) x __attribute((aligned(16)))
#endif

#define IK2PI  ((IkReal)6.28318530717959)
#define IKPI  ((IkReal)3.14159265358979)
#define IKPI_2  ((IkReal)1.57079632679490)

#ifdef _MSC_VER
#ifndef isnan
#define isnan _isnan
#endif
#ifndef isinf
#define isinf _isinf
#endif
//#ifndef isfinite
//#define isfinite _isfinite
//#endif
#endif // _MSC_VER

// lapack routines
extern "C" {
  void dgetrf_ (const int* m, const int* n, double* a, const int* lda, int* ipiv, int* info);
  void zgetrf_ (const int* m, const int* n, std::complex<double>* a, const int* lda, int* ipiv, int* info);
  void dgetri_(const int* n, const double* a, const int* lda, int* ipiv, double* work, const int* lwork, int* info);
  void dgesv_ (const int* n, const int* nrhs, double* a, const int* lda, int* ipiv, double* b, const int* ldb, int* info);
  void dgetrs_(const char *trans, const int *n, const int *nrhs, double *a, const int *lda, int *ipiv, double *b, const int *ldb, int *info);
  void dgeev_(const char *jobvl, const char *jobvr, const int *n, double *a, const int *lda, double *wr, double *wi,double *vl, const int *ldvl, double *vr, const int *ldvr, double *work, const int *lwork, int *info);
}

using namespace std; // necessary to get std math routines

#ifdef IKFAST_NAMESPACE
namespace IKFAST_NAMESPACE {
#endif

inline float IKabs(float f) { return fabsf(f); }
inline double IKabs(double f) { return fabs(f); }

inline float IKsqr(float f) { return f*f; }
inline double IKsqr(double f) { return f*f; }

inline float IKlog(float f) { return logf(f); }
inline double IKlog(double f) { return log(f); }

// allows asin and acos to exceed 1. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_SINCOS_THRESH
#define IKFAST_SINCOS_THRESH ((IkReal)1e-7)
#endif

// used to check input to atan2 for degenerate cases. has to be smaller than thresholds used for branch conds and evaluation
#ifndef IKFAST_ATAN2_MAGTHRESH
#define IKFAST_ATAN2_MAGTHRESH ((IkReal)1e-7)
#endif

// minimum distance of separate solutions
#ifndef IKFAST_SOLUTION_THRESH
#define IKFAST_SOLUTION_THRESH ((IkReal)1e-6)
#endif

// there are checkpoints in ikfast that are evaluated to make sure they are 0. This threshold speicfies by how much they can deviate
#ifndef IKFAST_EVALCOND_THRESH
#define IKFAST_EVALCOND_THRESH ((IkReal)0.00001)
#endif


inline float IKasin(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(-IKPI_2);
else if( f >= 1 ) return float(IKPI_2);
return asinf(f);
}
inline double IKasin(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return -IKPI_2;
else if( f >= 1 ) return IKPI_2;
return asin(f);
}

// return positive value in [0,y)
inline float IKfmod(float x, float y)
{
    while(x < 0) {
        x += y;
    }
    return fmodf(x,y);
}

// return positive value in [0,y)
inline double IKfmod(double x, double y)
{
    while(x < 0) {
        x += y;
    }
    return fmod(x,y);
}

inline float IKacos(float f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return float(IKPI);
else if( f >= 1 ) return float(0);
return acosf(f);
}
inline double IKacos(double f)
{
IKFAST_ASSERT( f > -1-IKFAST_SINCOS_THRESH && f < 1+IKFAST_SINCOS_THRESH ); // any more error implies something is wrong with the solver
if( f <= -1 ) return IKPI;
else if( f >= 1 ) return 0;
return acos(f);
}
inline float IKsin(float f) { return sinf(f); }
inline double IKsin(double f) { return sin(f); }
inline float IKcos(float f) { return cosf(f); }
inline double IKcos(double f) { return cos(f); }
inline float IKtan(float f) { return tanf(f); }
inline double IKtan(double f) { return tan(f); }
inline float IKsqrt(float f) { if( f <= 0.0f ) return 0.0f; return sqrtf(f); }
inline double IKsqrt(double f) { if( f <= 0.0 ) return 0.0; return sqrt(f); }
inline float IKatan2Simple(float fy, float fx) {
    return atan2f(fy,fx);
}
inline float IKatan2(float fy, float fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return float(IKPI_2);
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2f(fy,fx);
}
inline double IKatan2Simple(double fy, double fx) {
    return atan2(fy,fx);
}
inline double IKatan2(double fy, double fx) {
    if( isnan(fy) ) {
        IKFAST_ASSERT(!isnan(fx)); // if both are nan, probably wrong value will be returned
        return IKPI_2;
    }
    else if( isnan(fx) ) {
        return 0;
    }
    return atan2(fy,fx);
}

template <typename T>
struct CheckValue
{
    T value;
    bool valid;
};

template <typename T>
inline CheckValue<T> IKatan2WithCheck(T fy, T fx, T epsilon)
{
    CheckValue<T> ret;
    ret.valid = false;
    ret.value = 0;
    if( !isnan(fy) && !isnan(fx) ) {
        if( IKabs(fy) >= IKFAST_ATAN2_MAGTHRESH || IKabs(fx) > IKFAST_ATAN2_MAGTHRESH ) {
            ret.value = IKatan2Simple(fy,fx);
            ret.valid = true;
        }
    }
    return ret;
}

inline float IKsign(float f) {
    if( f > 0 ) {
        return float(1);
    }
    else if( f < 0 ) {
        return float(-1);
    }
    return 0;
}

inline double IKsign(double f) {
    if( f > 0 ) {
        return 1.0;
    }
    else if( f < 0 ) {
        return -1.0;
    }
    return 0;
}

template <typename T>
inline CheckValue<T> IKPowWithIntegerCheck(T f, int n)
{
    CheckValue<T> ret;
    ret.valid = true;
    if( n == 0 ) {
        ret.value = 1.0;
        return ret;
    }
    else if( n == 1 )
    {
        ret.value = f;
        return ret;
    }
    else if( n < 0 )
    {
        if( f == 0 )
        {
            ret.valid = false;
            ret.value = (T)1.0e30;
            return ret;
        }
        if( n == -1 ) {
            ret.value = T(1.0)/f;
            return ret;
        }
    }

    int num = n > 0 ? n : -n;
    if( num == 2 ) {
        ret.value = f*f;
    }
    else if( num == 3 ) {
        ret.value = f*f*f;
    }
    else {
        ret.value = 1.0;
        while(num>0) {
            if( num & 1 ) {
                ret.value *= f;
            }
            num >>= 1;
            f *= f;
        }
    }
    
    if( n < 0 ) {
        ret.value = T(1.0)/ret.value;
    }
    return ret;
}

/// solves the forward kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API void ComputeFk(const IkReal* j, IkReal* eetrans, IkReal* eerot) {
IkReal x0,x1,x2,x3,x4,x5,x6,x7,x8,x9,x10,x11,x12,x13,x14,x15,x16,x17,x18,x19,x20,x21,x22,x23,x24,x25,x26,x27,x28,x29,x30,x31,x32,x33,x34,x35,x36,x37,x38,x39,x40,x41,x42,x43,x44,x45,x46,x47,x48,x49,x50,x51,x52,x53,x54,x55,x56,x57,x58,x59,x60,x61,x62;
x0=IKcos(j[0]);
x1=IKcos(j[1]);
x2=IKcos(j[2]);
x3=IKsin(j[0]);
x4=IKsin(j[2]);
x5=IKcos(j[3]);
x6=IKsin(j[1]);
x7=IKsin(j[3]);
x8=IKcos(j[4]);
x9=IKsin(j[4]);
x10=IKcos(j[6]);
x11=IKsin(j[6]);
x12=IKsin(j[5]);
x13=IKcos(j[5]);
x14=((0.151)*x9);
x15=((0.4)*x3);
x16=((1.0)*x5);
x17=((1.0)*x8);
x18=((1.0)*x0);
x19=((0.151)*x7);
x20=((1.0)*x13);
x21=((0.151)*x8);
x22=((1.0)*x4);
x23=((1.0)*x9);
x24=((1.0)*x3);
x25=((0.4)*x0);
x26=(x5*x6);
x27=(x1*x2);
x28=(x6*x7);
x29=((-1.0)*x9);
x30=(x1*x7);
x31=(x0*x4);
x32=((-1.0)*x8);
x33=(x1*x5);
x34=(x4*x6);
x35=(x22*x3);
x36=(x16*x2*x6);
x37=(x22*x6*x9);
x38=((((-1.0)*x35))+((x0*x27)));
x39=(((x27*x3))+x31);
x40=(((x2*x28))+x33);
x41=((((-1.0)*x18*x27))+x35);
x42=((((-1.0)*x18*x2))+((x1*x35)));
x43=((((-1.0)*x30))+x36);
x44=(((x2*x24))+((x1*x18*x4)));
x45=((((-1.0)*x18*x4))+(((-1.0)*x24*x27)));
x46=(x12*x40);
x47=(x38*x5);
x48=(x42*x9);
x49=(x41*x7);
x50=(x43*x8);
x51=(x44*x9);
x52=(((x0*x28))+x47);
x53=(((x39*x5))+((x28*x3)));
x54=(((x0*x26))+x49);
x55=((((-1.0)*x37))+x50);
x56=(((x23*(((((-1.0)*x30))+x36))))+((x17*x34)));
x57=((((-1.0)*x18*x28))+(((-1.0)*x16*x38)));
x58=(((x26*x3))+((x45*x7)));
x59=((((-1.0)*x16*x39))+(((-1.0)*x24*x28)));
x60=(x12*x54);
x61=(x12*x58);
x62=(x48+((x59*x8)));
eerot[0]=((((-1.0)*x10*(((((1.0)*x13*((x51+((x8*(((((-1.0)*x47))+(((-1.0)*x0*x28))))))))))+(((1.0)*x60))))))+((x11*(((((-1.0)*x17*x44))+(((-1.0)*x23*x52)))))));
eerot[1]=(((x10*((((x32*x44))+((x29*x52))))))+((x11*((x60+((x13*((((x57*x8))+x51)))))))));
eerot[2]=(((x13*x54))+((x12*(((((-1.0)*x17*x57))+(((-1.0)*x23*x44)))))));
eetrans[0]=(((x12*(((((-1.0)*x14*x44))+(((-1.0)*x21*x57))))))+((x7*(((((-1.0)*x25*x27))+((x15*x4))))))+((x25*x26))+((x13*((((x19*x41))+(((0.151)*x0*x26))))))+((x25*x6)));
eerot[3]=(((x10*(((((-1.0)*x20*x62))+(((-1.0)*x61))))))+((x11*((((x32*x42))+((x29*x53)))))));
eerot[4]=(((x10*(((((-1.0)*x17*x42))+(((-1.0)*x23*x53))))))+((x11*((((x13*x62))+x61)))));
eerot[5]=(((x13*x58))+((x12*(((((-1.0)*x17*x59))+(((-1.0)*x23*x42)))))));
eetrans[1]=(((x13*(((((0.151)*x26*x3))+((x19*x45))))))+((x12*(((((-1.0)*x14*x42))+(((-1.0)*x21*x59))))))+((x7*(((((-1.0)*x25*x4))+(((-1.0)*x15*x27))))))+((x15*x26))+((x15*x6)));
eerot[6]=(((x11*x56))+((x10*(((((-1.0)*x46))+(((-1.0)*x20*x55)))))));
eerot[7]=(((x11*((((x13*x55))+x46))))+((x10*x56)));
eerot[8]=(((x12*(((((-1.0)*x17*x43))+x37))))+((x13*x40)));
eetrans[2]=((0.34)+(((0.4)*x1))+(((0.4)*x33))+((x12*((((x14*x34))+(((-1.0)*x21*x43))))))+((x13*(((((0.151)*x33))+((x19*x2*x6))))))+(((0.4)*x2*x28)));
}

IKFAST_API int GetNumFreeParameters() { return 1; }
IKFAST_API int* GetFreeParameters() { static int freeparams[] = {4}; return freeparams; }
IKFAST_API int GetNumJoints() { return 7; }

IKFAST_API int GetIkRealSize() { return sizeof(IkReal); }

IKFAST_API int GetIkType() { return 0x67000001; }

class IKSolver {
public:
IkReal j7,cj7,sj7,htj7,j7mul,j8,cj8,sj8,htj8,j8mul,j9,cj9,sj9,htj9,j9mul,j10,cj10,sj10,htj10,j10mul,j12,cj12,sj12,htj12,j12mul,j13,cj13,sj13,htj13,j13mul,j11,cj11,sj11,htj11,new_r00,r00,rxp0_0,new_r01,r01,rxp0_1,new_r02,r02,rxp0_2,new_r10,r10,rxp1_0,new_r11,r11,rxp1_1,new_r12,r12,rxp1_2,new_r20,r20,rxp2_0,new_r21,r21,rxp2_1,new_r22,r22,rxp2_2,new_px,px,npx,new_py,py,npy,new_pz,pz,npz,pp;
unsigned char _ij7[2], _nj7,_ij8[2], _nj8,_ij9[2], _nj9,_ij10[2], _nj10,_ij12[2], _nj12,_ij13[2], _nj13,_ij11[2], _nj11;

IkReal j100, cj100, sj100;
unsigned char _ij100[2], _nj100;
bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
j7=numeric_limits<IkReal>::quiet_NaN(); _ij7[0] = -1; _ij7[1] = -1; _nj7 = -1; j8=numeric_limits<IkReal>::quiet_NaN(); _ij8[0] = -1; _ij8[1] = -1; _nj8 = -1; j9=numeric_limits<IkReal>::quiet_NaN(); _ij9[0] = -1; _ij9[1] = -1; _nj9 = -1; j10=numeric_limits<IkReal>::quiet_NaN(); _ij10[0] = -1; _ij10[1] = -1; _nj10 = -1; j12=numeric_limits<IkReal>::quiet_NaN(); _ij12[0] = -1; _ij12[1] = -1; _nj12 = -1; j13=numeric_limits<IkReal>::quiet_NaN(); _ij13[0] = -1; _ij13[1] = -1; _nj13 = -1;  _ij11[0] = -1; _ij11[1] = -1; _nj11 = 0; 
for(int dummyiter = 0; dummyiter < 1; ++dummyiter) {
    solutions.Clear();
j11=pfree[0]; cj11=cos(pfree[0]); sj11=sin(pfree[0]), htj11=tan(pfree[0]*0.5);
r00 = eerot[0*3+0];
r01 = eerot[0*3+1];
r02 = eerot[0*3+2];
r10 = eerot[1*3+0];
r11 = eerot[1*3+1];
r12 = eerot[1*3+2];
r20 = eerot[2*3+0];
r21 = eerot[2*3+1];
r22 = eerot[2*3+2];
px = eetrans[0]; py = eetrans[1]; pz = eetrans[2];

new_r00=((-1.0)*r00);
new_r01=((-1.0)*r01);
new_r02=r02;
new_px=(px+(((-0.151)*r02)));
new_r10=((-1.0)*r10);
new_r11=((-1.0)*r11);
new_r12=r12;
new_py=(py+(((-0.151)*r12)));
new_r20=((-1.0)*r20);
new_r21=((-1.0)*r21);
new_r22=r22;
new_pz=((-0.34)+(((-0.151)*r22))+pz);
r00 = new_r00; r01 = new_r01; r02 = new_r02; r10 = new_r10; r11 = new_r11; r12 = new_r12; r20 = new_r20; r21 = new_r21; r22 = new_r22; px = new_px; py = new_py; pz = new_pz;
IkReal x63=((1.0)*px);
IkReal x64=((1.0)*pz);
IkReal x65=((1.0)*py);
pp=((px*px)+(py*py)+(pz*pz));
npx=(((px*r00))+((py*r10))+((pz*r20)));
npy=(((px*r01))+((py*r11))+((pz*r21)));
npz=(((px*r02))+((py*r12))+((pz*r22)));
rxp0_0=((((-1.0)*r20*x65))+((pz*r10)));
rxp0_1=(((px*r20))+(((-1.0)*r00*x64)));
rxp0_2=((((-1.0)*r10*x63))+((py*r00)));
rxp1_0=((((-1.0)*r21*x65))+((pz*r11)));
rxp1_1=(((px*r21))+(((-1.0)*r01*x64)));
rxp1_2=((((-1.0)*r11*x63))+((py*r01)));
rxp2_0=(((pz*r12))+(((-1.0)*r22*x65)));
rxp2_1=(((px*r22))+(((-1.0)*r02*x64)));
rxp2_2=((((-1.0)*r12*x63))+((py*r02)));
{
IkReal j10array[2], cj10array[2], sj10array[2];
bool j10valid[2]={false};
_nj10 = 2;
cj10array[0]=((-1.0)+(((3.125)*pp)));
if( cj10array[0] >= -1-IKFAST_SINCOS_THRESH && cj10array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j10valid[0] = j10valid[1] = true;
    j10array[0] = IKacos(cj10array[0]);
    sj10array[0] = IKsin(j10array[0]);
    cj10array[1] = cj10array[0];
    j10array[1] = -j10array[0];
    sj10array[1] = -sj10array[0];
}
else if( isnan(cj10array[0]) )
{
    // probably any value will work
    j10valid[0] = true;
    cj10array[0] = 1; sj10array[0] = 0; j10array[0] = 0;
}
for(int ij10 = 0; ij10 < 2; ++ij10)
{
if( !j10valid[ij10] )
{
    continue;
}
_ij10[0] = ij10; _ij10[1] = -1;
for(int iij10 = ij10+1; iij10 < 2; ++iij10)
{
if( j10valid[iij10] && IKabs(cj10array[ij10]-cj10array[iij10]) < IKFAST_SOLUTION_THRESH && IKabs(sj10array[ij10]-sj10array[iij10]) < IKFAST_SOLUTION_THRESH )
{
    j10valid[iij10]=false; _ij10[1] = iij10; break; 
}
}
j10 = j10array[ij10]; cj10 = cj10array[ij10]; sj10 = sj10array[ij10];

{
IkReal j13eval[2];
j13eval[0]=((npx*npx)+(npy*npy));
j13eval[1]=((IKabs(npy))+(IKabs(npx)));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  )
{
{
IkReal j12eval[2];
j12eval[0]=((((2.5)*(IKabs(((0.4)+(((0.4)*cj10)))))))+(IKabs((cj11*sj10))));
j12eval[1]=((1.0)+(cj10*cj10)+(((2.0)*cj10))+(((cj11*cj11)*(sj10*sj10))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
evalcond[1]=pp;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
j13eval[0]=((IKabs(npy))+(IKabs(npx)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j12, j13]

} else
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
CheckValue<IkReal> x67 = IKatan2WithCheck(IkReal(((-1.0)*npx)),IkReal(npy),IKFAST_ATAN2_MAGTHRESH);
if(!x67.valid){
continue;
}
IkReal x66=x67.value;
j13array[0]=((-1.0)*x66);
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
j13array[1]=((3.14159265358979)+(((-1.0)*x66)));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
if( j13array[1] > IKPI )
{
    j13array[1]-=IK2PI;
}
else if( j13array[1] < -IKPI )
{    j13array[1]+=IK2PI;
}
j13valid[1] = true;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*npy*(IKcos(j13))))+(((-1.0)*npx*(IKsin(j13)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j12eval[1];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
j12eval[0]=IKabs((((cj13*npx))+(((-1.0)*npy*sj13))));
if( IKabs(j12eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j12]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x68=(cj13*npx);
IkReal x69=(npy*sj13);
op[0]=(x68+(((-1.0)*x69)));
op[1]=0;
op[2]=(x69+(((-1.0)*x68)));
polyroots2(op,zeror,numroots);
IkReal j12array[2], cj12array[2], sj12array[2], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[2]={true,true};
_nj12 = 2;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
rotationfunction0(solutions);
    }

}

}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12, j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j12array[2], cj12array[2], sj12array[2];
bool j12valid[2]={false};
_nj12 = 2;
IkReal x1001=((0.4)+(((0.4)*cj10)));
CheckValue<IkReal> x1004 = IKatan2WithCheck(IkReal(x1001),IkReal(((0.4)*cj11*sj10)),IKFAST_ATAN2_MAGTHRESH);
if(!x1004.valid){
continue;
}
IkReal x1002=((1.0)*(x1004.value));
if((((((0.16)*(cj11*cj11)*(sj10*sj10)))+(x1001*x1001))) < -0.00001)
continue;
CheckValue<IkReal> x1005=IKPowWithIntegerCheck(IKabs(IKsqrt(((((0.16)*(cj11*cj11)*(sj10*sj10)))+(x1001*x1001)))),-1);
if(!x1005.valid){
continue;
}
if( ((npz*(x1005.value))) < -1-IKFAST_SINCOS_THRESH || ((npz*(x1005.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1003=IKasin((npz*(x1005.value)));
j12array[0]=(x1003+(((-1.0)*x1002)));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
j12array[1]=((3.14159265358979)+(((-1.0)*x1003))+(((-1.0)*x1002)));
sj12array[1]=IKsin(j12array[1]);
cj12array[1]=IKcos(j12array[1]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
if( j12array[1] > IKPI )
{
    j12array[1]-=IK2PI;
}
else if( j12array[1] < -IKPI )
{    j12array[1]+=IK2PI;
}
j12valid[1] = true;
for(int ij12 = 0; ij12 < 2; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 2; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];

{
IkReal j13eval[3];
IkReal x1006=npx*npx;
IkReal x1007=npy*npy;
IkReal x1008=(cj12*sj11);
IkReal x1009=((2.0)*npx*sj10);
IkReal x1010=((5.0)*npz*sj12);
IkReal x1011=(cj12*x1007);
IkReal x1012=((2.0)*npy*sj10);
IkReal x1013=(cj12*x1006);
j13eval[0]=(x1011+x1013);
j13eval[1]=IKsign(((((5.0)*x1011))+(((5.0)*x1013))));
j13eval[2]=((IKabs(((((-1.0)*cj11*x1009))+((x1008*x1012))+((npx*x1010)))))+(IKabs((((x1008*x1009))+(((-1.0)*npy*x1010))+((cj11*x1012))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
IkReal x1014=npy*npy;
IkReal x1015=npx*npx;
IkReal x1016=((5.0)*sj12);
IkReal x1017=((2.0)*npx);
IkReal x1018=((2.0)*npy);
IkReal x1019=((5.0)*cj12*npz);
IkReal x1020=((2.0)*sj10*sj11*sj12);
j13eval[0]=(((sj12*x1015))+((sj12*x1014)));
j13eval[1]=((IKabs((((cj10*x1017))+x1017+((sj10*sj11*sj12*x1018))+(((-1.0)*npx*x1019)))))+(IKabs(((((-1.0)*x1018))+((npy*x1019))+((sj10*sj11*sj12*x1017))+(((-1.0)*cj10*x1018))))));
j13eval[2]=IKsign((((x1014*x1016))+((x1015*x1016))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal j13eval[3];
IkReal x1021=npx*npx;
IkReal x1022=npy*npy;
IkReal x1023=((2.0)*npy);
IkReal x1024=(cj10*sj12);
IkReal x1025=((2.0)*npx);
IkReal x1026=(sj10*sj11);
IkReal x1027=(cj11*cj12*sj10);
j13eval[0]=(x1021+x1022);
j13eval[1]=((IKabs((((sj12*x1025))+((x1023*x1026))+(((-1.0)*x1025*x1027))+((x1024*x1025)))))+(IKabs(((((-1.0)*x1023*x1024))+((x1023*x1027))+((x1025*x1026))+(((-1.0)*sj12*x1023))))));
j13eval[2]=IKsign(((((5.0)*x1022))+(((5.0)*x1021))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
evalcond[1]=pp;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
j13eval[0]=((IKabs(npy))+(IKabs(npx)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
j13eval[0]=((IKabs((npy*sj12)))+(IKabs((npx*sj12))));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal j13eval[1];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
j13eval[0]=((IKabs((cj12*npx)))+(IKabs((cj12*npy))));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj12=1.0;
cj12=0;
j12=1.5707963267949;
j13eval[0]=((IKabs(npy))+(IKabs(npx)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
CheckValue<IkReal> x1029 = IKatan2WithCheck(IkReal(((-1.0)*npx)),IkReal(npy),IKFAST_ATAN2_MAGTHRESH);
if(!x1029.valid){
continue;
}
IkReal x1028=x1029.value;
j13array[0]=((-1.0)*x1028);
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
j13array[1]=((3.14159265358979)+(((-1.0)*x1028)));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
if( j13array[1] > IKPI )
{
    j13array[1]-=IK2PI;
}
else if( j13array[1] < -IKPI )
{    j13array[1]+=IK2PI;
}
j13valid[1] = true;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*npy*(IKcos(j13))))+(((-1.0)*npx*(IKsin(j13)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
j13eval[0]=((IKabs(npy))+(IKabs(npx)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
CheckValue<IkReal> x1031 = IKatan2WithCheck(IkReal(npx),IkReal(((-1.0)*npy)),IKFAST_ATAN2_MAGTHRESH);
if(!x1031.valid){
continue;
}
IkReal x1030=x1031.value;
j13array[0]=((-1.0)*x1030);
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
j13array[1]=((3.14159265358979)+(((-1.0)*x1030)));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
if( j13array[1] > IKPI )
{
    j13array[1]-=IK2PI;
}
else if( j13array[1] < -IKPI )
{    j13array[1]+=IK2PI;
}
j13valid[1] = true;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*npy*(IKcos(j13))))+(((-1.0)*npx*(IKsin(j13)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj12=0;
cj12=1.0;
j12=0;
j13eval[0]=((IKabs(npy))+(IKabs(npx)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
CheckValue<IkReal> x1033 = IKatan2WithCheck(IkReal(((-1.0)*npx)),IkReal(npy),IKFAST_ATAN2_MAGTHRESH);
if(!x1033.valid){
continue;
}
IkReal x1032=x1033.value;
j13array[0]=((-1.0)*x1032);
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
j13array[1]=((3.14159265358979)+(((-1.0)*x1032)));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
if( j13array[1] > IKPI )
{
    j13array[1]-=IK2PI;
}
else if( j13array[1] < -IKPI )
{    j13array[1]+=IK2PI;
}
j13valid[1] = true;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*npy*(IKcos(j13))))+(((-1.0)*npx*(IKsin(j13)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
j13eval[0]=((IKabs(npy))+(IKabs(npx)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
CheckValue<IkReal> x1035 = IKatan2WithCheck(IkReal(npx),IkReal(((-1.0)*npy)),IKFAST_ATAN2_MAGTHRESH);
if(!x1035.valid){
continue;
}
IkReal x1034=x1035.value;
j13array[0]=((-1.0)*x1034);
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
j13array[1]=((3.14159265358979)+(((-1.0)*x1034)));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
if( j13array[1] > IKPI )
{
    j13array[1]-=IK2PI;
}
else if( j13array[1] < -IKPI )
{    j13array[1]+=IK2PI;
}
j13valid[1] = true;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*npy*(IKcos(j13))))+(((-1.0)*npx*(IKsin(j13)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}

} else
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
CheckValue<IkReal> x1037 = IKatan2WithCheck(IkReal(((-1.0)*cj12*npx)),IkReal((cj12*npy)),IKFAST_ATAN2_MAGTHRESH);
if(!x1037.valid){
continue;
}
IkReal x1036=x1037.value;
j13array[0]=((-1.0)*x1036);
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
j13array[1]=((3.14159265358979)+(((-1.0)*x1036)));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
if( j13array[1] > IKPI )
{
    j13array[1]-=IK2PI;
}
else if( j13array[1] < -IKPI )
{    j13array[1]+=IK2PI;
}
j13valid[1] = true;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[3];
IkReal x1038=IKcos(j13);
IkReal x1039=IKsin(j13);
IkReal x1040=(npy*x1039);
IkReal x1041=((1.0)*x1038);
evalcond[0]=(x1040+(((-1.0)*npx*x1041)));
evalcond[1]=((((-1.0)*npx*x1039))+(((-1.0)*npy*x1041)));
evalcond[2]=((((-1.0)*npx*sj12*x1041))+((sj12*x1040)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
CheckValue<IkReal> x1043 = IKatan2WithCheck(IkReal(((-1.0)*npx*sj12)),IkReal((npy*sj12)),IKFAST_ATAN2_MAGTHRESH);
if(!x1043.valid){
continue;
}
IkReal x1042=x1043.value;
j13array[0]=((-1.0)*x1042);
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
j13array[1]=((3.14159265358979)+(((-1.0)*x1042)));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
if( j13array[1] > IKPI )
{
    j13array[1]-=IK2PI;
}
else if( j13array[1] < -IKPI )
{    j13array[1]+=IK2PI;
}
j13valid[1] = true;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[3];
IkReal x1044=IKcos(j13);
IkReal x1045=IKsin(j13);
IkReal x1046=(npy*x1045);
IkReal x1047=((1.0)*x1044);
evalcond[0]=(x1046+(((-1.0)*npx*x1047)));
evalcond[1]=((((-1.0)*npx*x1045))+(((-1.0)*npy*x1047)));
evalcond[2]=((((-1.0)*cj12*npx*x1047))+((cj12*x1046)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
CheckValue<IkReal> x1049 = IKatan2WithCheck(IkReal(((-1.0)*npx)),IkReal(npy),IKFAST_ATAN2_MAGTHRESH);
if(!x1049.valid){
continue;
}
IkReal x1048=x1049.value;
j13array[0]=((-1.0)*x1048);
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
j13array[1]=((3.14159265358979)+(((-1.0)*x1048)));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
if( j13array[1] > IKPI )
{
    j13array[1]-=IK2PI;
}
else if( j13array[1] < -IKPI )
{    j13array[1]+=IK2PI;
}
j13valid[1] = true;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[3];
IkReal x1050=IKsin(j13);
IkReal x1051=IKcos(j13);
IkReal x1052=((1.0)*x1051);
IkReal x1053=(npy*x1050);
evalcond[0]=((((-1.0)*npx*x1050))+(((-1.0)*npy*x1052)));
evalcond[1]=((((-1.0)*npx*sj12*x1052))+((sj12*x1053)));
evalcond[2]=((((-1.0)*cj12*npx*x1052))+((cj12*x1053)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j12))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[3];
sj12=0;
cj12=1.0;
j12=0;
IkReal x1054=npx*npx;
IkReal x1055=npy*npy;
IkReal x1056=(npx*sj10);
IkReal x1057=(npy*sj10);
j13eval[0]=(x1054+x1055);
j13eval[1]=((IKabs((((sj11*x1056))+((cj11*x1057)))))+(IKabs((((sj11*x1057))+(((-1.0)*cj11*x1056))))));
j13eval[2]=IKsign(((((5.0)*x1055))+(((5.0)*x1054))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
sj12=0;
cj12=1.0;
j12=0;
sj10=0;
cj10=1.0;
j10=0;
j13eval[0]=((IKabs(npy))+(IKabs(npx)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
CheckValue<IkReal> x1059 = IKatan2WithCheck(IkReal(((-1.0)*npx)),IkReal(npy),IKFAST_ATAN2_MAGTHRESH);
if(!x1059.valid){
continue;
}
IkReal x1058=x1059.value;
j13array[0]=((-1.0)*x1058);
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
j13array[1]=((3.14159265358979)+(((-1.0)*x1058)));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
if( j13array[1] > IKPI )
{
    j13array[1]-=IK2PI;
}
else if( j13array[1] < -IKPI )
{    j13array[1]+=IK2PI;
}
j13valid[1] = true;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*npy*(IKcos(j13))))+(((-1.0)*npx*(IKsin(j13)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1060=((2.0)*cj11*sj10);
IkReal x1061=((2.0)*sj10*sj11);
CheckValue<IkReal> x1062=IKPowWithIntegerCheck(IKsign(((((5.0)*(npx*npx)))+(((5.0)*(npy*npy))))),-1);
if(!x1062.valid){
continue;
}
CheckValue<IkReal> x1063 = IKatan2WithCheck(IkReal((((npx*x1061))+((npy*x1060)))),IkReal(((((-1.0)*npx*x1060))+((npy*x1061)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1063.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(((1.5707963267949)*(x1062.value)))+(x1063.value));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[2];
IkReal x1064=IKcos(j13);
IkReal x1065=IKsin(j13);
IkReal x1066=((0.4)*sj10);
IkReal x1067=((1.0)*x1064);
evalcond[0]=((((-1.0)*npx*x1067))+(((-1.0)*cj11*x1066))+((npy*x1065)));
evalcond[1]=((((-1.0)*npy*x1067))+(((-1.0)*npx*x1065))+((sj11*x1066)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[3];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
IkReal x1068=npx*npx;
IkReal x1069=npy*npy;
IkReal x1070=(npx*sj10);
IkReal x1071=(npy*sj10);
j13eval[0]=(x1069+x1068);
j13eval[1]=((IKabs(((((-1.0)*cj11*x1071))+((sj11*x1070)))))+(IKabs((((cj11*x1070))+((sj11*x1071))))));
j13eval[2]=IKsign(((((5.0)*x1069))+(((5.0)*x1068))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j10))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[1];
sj12=0;
cj12=-1.0;
j12=3.14159265358979;
sj10=0;
cj10=1.0;
j10=0;
j13eval[0]=((IKabs(npy))+(IKabs(npx)));
if( IKabs(j13eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
CheckValue<IkReal> x1073 = IKatan2WithCheck(IkReal(npx),IkReal(((-1.0)*npy)),IKFAST_ATAN2_MAGTHRESH);
if(!x1073.valid){
continue;
}
IkReal x1072=x1073.value;
j13array[0]=((-1.0)*x1072);
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
j13array[1]=((3.14159265358979)+(((-1.0)*x1072)));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
if( j13array[1] > IKPI )
{
    j13array[1]-=IK2PI;
}
else if( j13array[1] < -IKPI )
{    j13array[1]+=IK2PI;
}
j13valid[1] = true;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*npy*(IKcos(j13))))+(((-1.0)*npx*(IKsin(j13)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1074=((2.0)*cj11*sj10);
IkReal x1075=((2.0)*sj10*sj11);
CheckValue<IkReal> x1076 = IKatan2WithCheck(IkReal(((((-1.0)*npy*x1074))+((npx*x1075)))),IkReal((((npx*x1074))+((npy*x1075)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1076.valid){
continue;
}
CheckValue<IkReal> x1077=IKPowWithIntegerCheck(IKsign(((((5.0)*(npx*npx)))+(((5.0)*(npy*npy))))),-1);
if(!x1077.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x1076.value)+(((1.5707963267949)*(x1077.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[2];
IkReal x1078=IKcos(j13);
IkReal x1079=IKsin(j13);
IkReal x1080=((1.0)*npy);
IkReal x1081=((0.4)*sj10);
evalcond[0]=((((-1.0)*cj11*x1081))+(((-1.0)*x1079*x1080))+((npx*x1078)));
evalcond[1]=((((-1.0)*npx*x1079))+((sj11*x1081))+(((-1.0)*x1078*x1080)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[3];
sj12=1.0;
cj12=0;
j12=1.5707963267949;
IkReal x1082=npy*npy;
IkReal x1083=npx*npx;
IkReal x1084=((25.0)*pp);
IkReal x1085=((8.0)*sj10*sj11);
j13eval[0]=(x1083+x1082);
j13eval[1]=IKsign(((((20.0)*x1083))+(((20.0)*x1082))));
j13eval[2]=((IKabs(((((-1.0)*npy*x1084))+((npx*x1085)))))+(IKabs((((npy*x1085))+((npx*x1084))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1086=((25.0)*pp);
IkReal x1087=((8.0)*sj10*sj11);
CheckValue<IkReal> x1088 = IKatan2WithCheck(IkReal(((((-1.0)*npy*x1086))+((npx*x1087)))),IkReal((((npy*x1087))+((npx*x1086)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1088.valid){
continue;
}
CheckValue<IkReal> x1089=IKPowWithIntegerCheck(IKsign(((((20.0)*(npy*npy)))+(((20.0)*(npx*npx))))),-1);
if(!x1089.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x1088.value)+(((1.5707963267949)*(x1089.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[2];
IkReal x1090=IKcos(j13);
IkReal x1091=IKsin(j13);
IkReal x1092=((1.0)*x1090);
evalcond[0]=(((npy*x1091))+(((-1.0)*npx*x1092))+(((1.25)*pp)));
evalcond[1]=((((0.4)*sj10*sj11))+(((-1.0)*npx*x1091))+(((-1.0)*npy*x1092)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j12)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j13eval[3];
sj12=-1.0;
cj12=0;
j12=-1.5707963267949;
IkReal x1093=npy*npy;
IkReal x1094=npx*npx;
IkReal x1095=((25.0)*pp);
IkReal x1096=((8.0)*sj10*sj11);
j13eval[0]=(x1094+x1093);
j13eval[1]=IKsign(((((20.0)*x1093))+(((20.0)*x1094))));
j13eval[2]=((IKabs((((npx*x1096))+((npy*x1095)))))+(IKabs((((npy*x1096))+(((-1.0)*npx*x1095))))));
if( IKabs(j13eval[0]) < 0.0000010000000000  || IKabs(j13eval[1]) < 0.0000010000000000  || IKabs(j13eval[2]) < 0.0000010000000000  )
{
continue; // no branches [j13]

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1097=((25.0)*pp);
IkReal x1098=((8.0)*sj10*sj11);
CheckValue<IkReal> x1099 = IKatan2WithCheck(IkReal((((npx*x1098))+((npy*x1097)))),IkReal((((npy*x1098))+(((-1.0)*npx*x1097)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1099.valid){
continue;
}
CheckValue<IkReal> x1100=IKPowWithIntegerCheck(IKsign(((((20.0)*(npy*npy)))+(((20.0)*(npx*npx))))),-1);
if(!x1100.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x1099.value)+(((1.5707963267949)*(x1100.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[2];
IkReal x1101=IKcos(j13);
IkReal x1102=IKsin(j13);
IkReal x1103=((1.0)*npy);
evalcond[0]=(((npx*x1101))+(((-1.0)*x1102*x1103))+(((1.25)*pp)));
evalcond[1]=((((0.4)*sj10*sj11))+(((-1.0)*npx*x1102))+(((-1.0)*x1101*x1103)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j13]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1104=((2.0)*npy);
IkReal x1105=(cj10*sj12);
IkReal x1106=((2.0)*npx);
IkReal x1107=(sj10*sj11);
IkReal x1108=(cj11*cj12*sj10);
CheckValue<IkReal> x1109 = IKatan2WithCheck(IkReal(((((-1.0)*sj12*x1104))+((x1104*x1108))+(((-1.0)*x1104*x1105))+((x1106*x1107)))),IkReal((((sj12*x1106))+((x1105*x1106))+((x1104*x1107))+(((-1.0)*x1106*x1108)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1109.valid){
continue;
}
CheckValue<IkReal> x1110=IKPowWithIntegerCheck(IKsign(((((5.0)*(npx*npx)))+(((5.0)*(npy*npy))))),-1);
if(!x1110.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x1109.value)+(((1.5707963267949)*(x1110.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x1111=IKsin(j13);
IkReal x1112=IKcos(j13);
IkReal x1113=((0.4)*cj10);
IkReal x1114=((0.4)*sj10);
IkReal x1115=((1.0)*x1112);
IkReal x1116=(npy*x1111);
evalcond[0]=((((-1.0)*npy*x1115))+(((-1.0)*npx*x1111))+((sj11*x1114)));
evalcond[1]=((((-1.0)*cj11*x1114))+(((-1.0)*cj12*npx*x1115))+((npz*sj12))+((cj12*x1116)));
evalcond[2]=((0.4)+((sj12*x1116))+x1113+(((-1.0)*cj12*npz))+(((-1.0)*npx*sj12*x1115)));
evalcond[3]=(((sj12*x1113))+x1116+(((-1.0)*npx*x1115))+(((0.4)*sj12))+(((-1.0)*cj11*cj12*x1114)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1117=((5.0)*sj12);
IkReal x1118=((2.0)*npy);
IkReal x1119=((2.0)*npx);
IkReal x1120=(sj10*sj11*sj12);
IkReal x1121=((5.0)*cj12*npz);
CheckValue<IkReal> x1122 = IKatan2WithCheck(IkReal((((x1119*x1120))+(((-1.0)*cj10*x1118))+((npy*x1121))+(((-1.0)*x1118)))),IkReal(((((-1.0)*npx*x1121))+x1119+((x1118*x1120))+((cj10*x1119)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1122.valid){
continue;
}
CheckValue<IkReal> x1123=IKPowWithIntegerCheck(IKsign((((x1117*(npx*npx)))+((x1117*(npy*npy))))),-1);
if(!x1123.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x1122.value)+(((1.5707963267949)*(x1123.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x1124=IKsin(j13);
IkReal x1125=IKcos(j13);
IkReal x1126=((0.4)*cj10);
IkReal x1127=((0.4)*sj10);
IkReal x1128=((1.0)*x1125);
IkReal x1129=(npy*x1124);
evalcond[0]=((((-1.0)*npy*x1128))+(((-1.0)*npx*x1124))+((sj11*x1127)));
evalcond[1]=((((-1.0)*cj12*npx*x1128))+(((-1.0)*cj11*x1127))+((cj12*x1129))+((npz*sj12)));
evalcond[2]=((0.4)+((sj12*x1129))+x1126+(((-1.0)*cj12*npz))+(((-1.0)*npx*sj12*x1128)));
evalcond[3]=((((-1.0)*npx*x1128))+((sj12*x1126))+x1129+(((0.4)*sj12))+(((-1.0)*cj11*cj12*x1127)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j13array[1], cj13array[1], sj13array[1];
bool j13valid[1]={false};
_nj13 = 1;
IkReal x1130=(cj12*sj11);
IkReal x1131=((5.0)*cj12);
IkReal x1132=((2.0)*npx*sj10);
IkReal x1133=((5.0)*npz*sj12);
IkReal x1134=((2.0)*npy*sj10);
CheckValue<IkReal> x1135 = IKatan2WithCheck(IkReal(((((-1.0)*npy*x1133))+((x1130*x1132))+((cj11*x1134)))),IkReal((((npx*x1133))+((x1130*x1134))+(((-1.0)*cj11*x1132)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1135.valid){
continue;
}
CheckValue<IkReal> x1136=IKPowWithIntegerCheck(IKsign((((x1131*(npy*npy)))+((x1131*(npx*npx))))),-1);
if(!x1136.valid){
continue;
}
j13array[0]=((-1.5707963267949)+(x1135.value)+(((1.5707963267949)*(x1136.value))));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
for(int ij13 = 0; ij13 < 1; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 1; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];
{
IkReal evalcond[4];
IkReal x1137=IKsin(j13);
IkReal x1138=IKcos(j13);
IkReal x1139=((0.4)*cj10);
IkReal x1140=((0.4)*sj10);
IkReal x1141=((1.0)*x1138);
IkReal x1142=(npy*x1137);
evalcond[0]=((((-1.0)*npy*x1141))+(((-1.0)*npx*x1137))+((sj11*x1140)));
evalcond[1]=((((-1.0)*cj11*x1140))+((cj12*x1142))+(((-1.0)*cj12*npx*x1141))+((npz*sj12)));
evalcond[2]=((0.4)+x1139+(((-1.0)*cj12*npz))+(((-1.0)*npx*sj12*x1141))+((sj12*x1142)));
evalcond[3]=(x1142+(((-1.0)*npx*x1141))+(((0.4)*sj12))+((sj12*x1139))+(((-1.0)*cj11*cj12*x1140)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}

} else
{
{
IkReal j13array[2], cj13array[2], sj13array[2];
bool j13valid[2]={false};
_nj13 = 2;
CheckValue<IkReal> x1145 = IKatan2WithCheck(IkReal(((-1.0)*npy)),IkReal(((-1.0)*npx)),IKFAST_ATAN2_MAGTHRESH);
if(!x1145.valid){
continue;
}
IkReal x1143=((1.0)*(x1145.value));
if((((npx*npx)+(npy*npy))) < -0.00001)
continue;
CheckValue<IkReal> x1146=IKPowWithIntegerCheck(IKabs(IKsqrt(((npx*npx)+(npy*npy)))),-1);
if(!x1146.valid){
continue;
}
if( (((0.4)*sj10*sj11*(x1146.value))) < -1-IKFAST_SINCOS_THRESH || (((0.4)*sj10*sj11*(x1146.value))) > 1+IKFAST_SINCOS_THRESH )
    continue;
IkReal x1144=IKasin(((0.4)*sj10*sj11*(x1146.value)));
j13array[0]=((((-1.0)*x1143))+(((-1.0)*x1144)));
sj13array[0]=IKsin(j13array[0]);
cj13array[0]=IKcos(j13array[0]);
j13array[1]=((3.14159265358979)+x1144+(((-1.0)*x1143)));
sj13array[1]=IKsin(j13array[1]);
cj13array[1]=IKcos(j13array[1]);
if( j13array[0] > IKPI )
{
    j13array[0]-=IK2PI;
}
else if( j13array[0] < -IKPI )
{    j13array[0]+=IK2PI;
}
j13valid[0] = true;
if( j13array[1] > IKPI )
{
    j13array[1]-=IK2PI;
}
else if( j13array[1] < -IKPI )
{    j13array[1]+=IK2PI;
}
j13valid[1] = true;
for(int ij13 = 0; ij13 < 2; ++ij13)
{
if( !j13valid[ij13] )
{
    continue;
}
_ij13[0] = ij13; _ij13[1] = -1;
for(int iij13 = ij13+1; iij13 < 2; ++iij13)
{
if( j13valid[iij13] && IKabs(cj13array[ij13]-cj13array[iij13]) < IKFAST_SOLUTION_THRESH && IKabs(sj13array[ij13]-sj13array[iij13]) < IKFAST_SOLUTION_THRESH )
{
    j13valid[iij13]=false; _ij13[1] = iij13; break; 
}
}
j13 = j13array[ij13]; cj13 = cj13array[ij13]; sj13 = sj13array[ij13];

{
IkReal j12eval[3];
IkReal x1147=(cj13*npx);
IkReal x1148=((5.0)*npz);
IkReal x1149=(npy*sj13);
IkReal x1150=(cj11*sj10);
IkReal x1151=((2.0)*cj10);
j12eval[0]=(x1149+(((-1.0)*cj10*x1147))+(((-1.0)*x1147))+((cj10*x1149))+((npz*x1150)));
j12eval[1]=((IKabs(((-0.8)+((npz*x1148))+(((-0.8)*(cj10*cj10)))+(((-1.6)*cj10)))))+(IKabs(((((0.8)*cj10*x1150))+(((0.8)*x1150))+(((-1.0)*x1147*x1148))+((x1148*x1149))))));
j12eval[2]=IKsign((((x1149*x1151))+(((2.0)*npz*x1150))+(((2.0)*x1149))+(((-2.0)*x1147))+(((-1.0)*x1147*x1151))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
IkReal x1152=cj10*cj10;
IkReal x1153=cj11*cj11;
IkReal x1154=(npy*sj13);
IkReal x1155=((10.0)*cj10);
IkReal x1156=(cj13*npx);
IkReal x1157=((4.0)*x1152);
IkReal x1158=((10.0)*cj11*sj10);
j12eval[0]=((1.0)+(((-1.0)*x1152*x1153))+x1153+x1152+(((2.0)*cj10)));
j12eval[1]=IKsign(((4.0)+x1157+(((8.0)*cj10))+(((-1.0)*x1153*x1157))+(((4.0)*x1153))));
j12eval[2]=((IKabs(((((-10.0)*x1154))+(((-1.0)*x1154*x1155))+(((10.0)*x1156))+((npz*x1158))+((x1155*x1156)))))+(IKabs(((((10.0)*npz))+(((-1.0)*x1156*x1158))+((npz*x1155))+((x1154*x1158))))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal j12eval[3];
IkReal x1159=cj13*cj13;
IkReal x1160=npy*npy;
IkReal x1161=npz*npz;
IkReal x1162=npx*npx;
IkReal x1163=(cj11*sj10);
IkReal x1164=((2.0)*npz);
IkReal x1165=(cj13*npx);
IkReal x1166=((2.0)*npy*sj13);
IkReal x1167=((2.0)*x1165);
IkReal x1168=(x1159*x1162);
IkReal x1169=(x1159*x1160);
j12eval[0]=(x1160+x1161+x1168+(((-1.0)*x1169))+(((-1.0)*x1165*x1166)));
j12eval[1]=((IKabs((((cj10*x1164))+x1164+((x1163*x1166))+(((-1.0)*x1163*x1167)))))+(IKabs((((cj10*x1167))+x1167+((x1163*x1164))+(((-1.0)*cj10*x1166))+(((-1.0)*x1166))))));
j12eval[2]=IKsign(((((-5.0)*x1169))+(((5.0)*x1161))+(((5.0)*x1160))+(((5.0)*x1168))+(((-10.0)*npy*sj13*x1165))));
if( IKabs(j12eval[0]) < 0.0000010000000000  || IKabs(j12eval[1]) < 0.0000010000000000  || IKabs(j12eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[2];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j10)))), 6.28318530717959)));
evalcond[1]=pp;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j12eval[1];
sj10=0;
cj10=-1.0;
j10=3.14159265358979;
j12eval[0]=IKabs((((cj13*npx))+(((-1.0)*npy*sj13))));
if( IKabs(j12eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j12]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
IkReal x1170=(cj13*npx);
IkReal x1171=(npy*sj13);
op[0]=(x1170+(((-1.0)*x1171)));
op[1]=0;
op[2]=(x1171+(((-1.0)*x1170)));
polyroots2(op,zeror,numroots);
IkReal j12array[2], cj12array[2], sj12array[2], tempj12array[1];
int numsolutions = 0;
for(int ij12 = 0; ij12 < numroots; ++ij12)
{
IkReal htj12 = zeror[ij12];
tempj12array[0]=((2.0)*(atan(htj12)));
for(int kj12 = 0; kj12 < 1; ++kj12)
{
j12array[numsolutions] = tempj12array[kj12];
if( j12array[numsolutions] > IKPI )
{
    j12array[numsolutions]-=IK2PI;
}
else if( j12array[numsolutions] < -IKPI )
{
    j12array[numsolutions]+=IK2PI;
}
sj12array[numsolutions] = IKsin(j12array[numsolutions]);
cj12array[numsolutions] = IKcos(j12array[numsolutions]);
numsolutions++;
}
}
bool j12valid[2]={true,true};
_nj12 = 2;
for(int ij12 = 0; ij12 < numsolutions; ++ij12)
    {
if( !j12valid[ij12] )
{
    continue;
}
    j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
htj12 = IKtan(j12/2);

_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < numsolutions; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
rotationfunction0(solutions);
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j12]

}
} while(0);
if( bgotonextstatement )
{
}
}
}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1172=cj13*cj13;
IkReal x1173=npy*npy;
IkReal x1174=(cj11*sj10);
IkReal x1175=((2.0)*npz);
IkReal x1176=((2.0)*npy*sj13);
IkReal x1177=((5.0)*x1172);
IkReal x1178=((2.0)*cj13*npx);
CheckValue<IkReal> x1179 = IKatan2WithCheck(IkReal((x1178+((cj10*x1178))+(((-1.0)*cj10*x1176))+((x1174*x1175))+(((-1.0)*x1176)))),IkReal((x1175+((cj10*x1175))+((x1174*x1176))+(((-1.0)*x1174*x1178)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1179.valid){
continue;
}
CheckValue<IkReal> x1180=IKPowWithIntegerCheck(IKsign(((((-10.0)*cj13*npx*npy*sj13))+(((-1.0)*x1173*x1177))+((x1177*(npx*npx)))+(((5.0)*(npz*npz)))+(((5.0)*x1173)))),-1);
if(!x1180.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1179.value)+(((1.5707963267949)*(x1180.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[4];
IkReal x1181=IKcos(j12);
IkReal x1182=IKsin(j12);
IkReal x1183=((0.4)*cj10);
IkReal x1184=((1.0)*npz);
IkReal x1185=(npy*sj13);
IkReal x1186=(cj11*sj10);
IkReal x1187=((1.0)*cj13*npx);
IkReal x1188=((0.4)*x1182);
IkReal x1189=((0.4)*x1181);
evalcond[0]=(x1189+((x1186*x1188))+(((-1.0)*x1184))+((x1181*x1183)));
evalcond[1]=((((-1.0)*x1181*x1187))+(((-0.4)*x1186))+((npz*x1182))+((x1181*x1185)));
evalcond[2]=((0.4)+(((-1.0)*x1181*x1184))+x1183+((x1182*x1185))+(((-1.0)*x1182*x1187)));
evalcond[3]=(x1188+x1185+((x1182*x1183))+(((-1.0)*x1186*x1189))+(((-1.0)*x1187)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1190=cj10*cj10;
IkReal x1191=cj11*cj11;
IkReal x1192=(npy*sj13);
IkReal x1193=(cj13*npx);
IkReal x1194=((10.0)*cj10);
IkReal x1195=((4.0)*x1190);
IkReal x1196=((10.0)*cj11*sj10);
CheckValue<IkReal> x1197 = IKatan2WithCheck(IkReal(((((-10.0)*x1192))+(((10.0)*x1193))+((npz*x1196))+((x1193*x1194))+(((-1.0)*x1192*x1194)))),IkReal(((((-1.0)*x1193*x1196))+(((10.0)*npz))+((npz*x1194))+((x1192*x1196)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1197.valid){
continue;
}
CheckValue<IkReal> x1198=IKPowWithIntegerCheck(IKsign(((4.0)+x1195+(((-1.0)*x1191*x1195))+(((4.0)*x1191))+(((8.0)*cj10)))),-1);
if(!x1198.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1197.value)+(((1.5707963267949)*(x1198.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[4];
IkReal x1199=IKcos(j12);
IkReal x1200=IKsin(j12);
IkReal x1201=((0.4)*cj10);
IkReal x1202=((1.0)*npz);
IkReal x1203=(npy*sj13);
IkReal x1204=(cj11*sj10);
IkReal x1205=((1.0)*cj13*npx);
IkReal x1206=((0.4)*x1200);
IkReal x1207=((0.4)*x1199);
evalcond[0]=(((x1204*x1206))+x1207+((x1199*x1201))+(((-1.0)*x1202)));
evalcond[1]=((((-1.0)*x1199*x1205))+(((-0.4)*x1204))+((x1199*x1203))+((npz*x1200)));
evalcond[2]=((0.4)+(((-1.0)*x1199*x1202))+x1201+((x1200*x1203))+(((-1.0)*x1200*x1205)));
evalcond[3]=((((-1.0)*x1204*x1207))+x1206+x1203+((x1200*x1201))+(((-1.0)*x1205)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}

} else
{
{
IkReal j12array[1], cj12array[1], sj12array[1];
bool j12valid[1]={false};
_nj12 = 1;
IkReal x1208=(cj13*npx);
IkReal x1209=((5.0)*npz);
IkReal x1210=(npy*sj13);
IkReal x1211=(cj11*sj10);
IkReal x1212=((2.0)*cj10);
CheckValue<IkReal> x1213 = IKatan2WithCheck(IkReal(((-0.8)+(((-0.8)*(cj10*cj10)))+(((-1.6)*cj10))+((npz*x1209)))),IkReal(((((0.8)*cj10*x1211))+(((0.8)*x1211))+((x1209*x1210))+(((-1.0)*x1208*x1209)))),IKFAST_ATAN2_MAGTHRESH);
if(!x1213.valid){
continue;
}
CheckValue<IkReal> x1214=IKPowWithIntegerCheck(IKsign(((((-1.0)*x1208*x1212))+((x1210*x1212))+(((2.0)*npz*x1211))+(((-2.0)*x1208))+(((2.0)*x1210)))),-1);
if(!x1214.valid){
continue;
}
j12array[0]=((-1.5707963267949)+(x1213.value)+(((1.5707963267949)*(x1214.value))));
sj12array[0]=IKsin(j12array[0]);
cj12array[0]=IKcos(j12array[0]);
if( j12array[0] > IKPI )
{
    j12array[0]-=IK2PI;
}
else if( j12array[0] < -IKPI )
{    j12array[0]+=IK2PI;
}
j12valid[0] = true;
for(int ij12 = 0; ij12 < 1; ++ij12)
{
if( !j12valid[ij12] )
{
    continue;
}
_ij12[0] = ij12; _ij12[1] = -1;
for(int iij12 = ij12+1; iij12 < 1; ++iij12)
{
if( j12valid[iij12] && IKabs(cj12array[ij12]-cj12array[iij12]) < IKFAST_SOLUTION_THRESH && IKabs(sj12array[ij12]-sj12array[iij12]) < IKFAST_SOLUTION_THRESH )
{
    j12valid[iij12]=false; _ij12[1] = iij12; break; 
}
}
j12 = j12array[ij12]; cj12 = cj12array[ij12]; sj12 = sj12array[ij12];
{
IkReal evalcond[4];
IkReal x1215=IKcos(j12);
IkReal x1216=IKsin(j12);
IkReal x1217=((0.4)*cj10);
IkReal x1218=((1.0)*npz);
IkReal x1219=(npy*sj13);
IkReal x1220=(cj11*sj10);
IkReal x1221=((1.0)*cj13*npx);
IkReal x1222=((0.4)*x1216);
IkReal x1223=((0.4)*x1215);
evalcond[0]=(x1223+((x1220*x1222))+(((-1.0)*x1218))+((x1215*x1217)));
evalcond[1]=(((npz*x1216))+(((-1.0)*x1215*x1221))+(((-0.4)*x1220))+((x1215*x1219)));
evalcond[2]=((0.4)+x1217+(((-1.0)*x1215*x1218))+((x1216*x1219))+(((-1.0)*x1216*x1221)));
evalcond[3]=(x1222+x1219+(((-1.0)*x1221))+(((-1.0)*x1220*x1223))+((x1216*x1217)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

rotationfunction0(solutions);
}
}

}

}
}
}

}

}
}
}
}
return solutions.GetNumSolutions()>0;
}
inline void rotationfunction0(IkSolutionListBase<IkReal>& solutions) {
for(int rotationiter = 0; rotationiter < 1; ++rotationiter) {
IkReal x70=(r02*sj12);
IkReal x71=(r12*sj12);
IkReal x72=(r22*sj12);
IkReal x73=((1.0)*sj13);
IkReal x74=((1.0)*cj13);
IkReal x75=((1.0)*sj11);
IkReal x76=((1.0)*cj12);
IkReal x77=((1.0)*cj11);
IkReal x78=((1.0)*cj10);
IkReal x79=((-1.0)*sj11);
IkReal x80=((-1.0)*cj12);
IkReal x81=((((-1.0)*r01*x73))+((cj13*r00)));
IkReal x82=(((cj13*r10))+(((-1.0)*r11*x73)));
IkReal x83=((((-1.0)*r21*x73))+((cj13*r20)));
IkReal x84=(cj12*x82);
IkReal x85=((((-1.0)*r01*x74))+(((-1.0)*r00*x73)));
IkReal x86=((((-1.0)*r10*x73))+(((-1.0)*r11*x74)));
IkReal x87=((((-1.0)*r21*x74))+(((-1.0)*r20*x73)));
IkReal x88=(((sj12*x81))+((cj12*r02)));
IkReal x89=(((sj12*x82))+((cj12*r12)));
IkReal x90=(((sj12*x83))+((cj12*r22)));
IkReal x91=(((x79*x85))+((cj11*((x70+((x80*x81)))))));
IkReal x92=(((x79*x86))+((cj11*((x71+((x80*x82)))))));
IkReal x93=(((x79*x87))+((cj11*((x72+((x80*x83)))))));
new_r00=(((sj10*x88))+(((-1.0)*x78*x91)));
new_r01=((((-1.0)*x77*x85))+(((-1.0)*x75*((x70+(((-1.0)*x76*x81)))))));
new_r02=(((sj10*x91))+((cj10*x88)));
new_r10=(((sj10*x89))+(((-1.0)*x78*x92)));
new_r11=((((-1.0)*x75*((x71+(((-1.0)*x76*x82))))))+(((-1.0)*x77*x86)));
new_r12=(((sj10*x92))+((cj10*x89)));
new_r20=((((-1.0)*x78*x93))+((sj10*x90)));
new_r21=((((-1.0)*x75*((x72+(((-1.0)*x76*x83))))))+(((-1.0)*x77*x87)));
new_r22=(((sj10*x93))+((cj10*x90)));
{
IkReal j8array[2], cj8array[2], sj8array[2];
bool j8valid[2]={false};
_nj8 = 2;
cj8array[0]=new_r22;
if( cj8array[0] >= -1-IKFAST_SINCOS_THRESH && cj8array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j8valid[0] = j8valid[1] = true;
    j8array[0] = IKacos(cj8array[0]);
    sj8array[0] = IKsin(j8array[0]);
    cj8array[1] = cj8array[0];
    j8array[1] = -j8array[0];
    sj8array[1] = -sj8array[0];
}
else if( isnan(cj8array[0]) )
{
    // probably any value will work
    j8valid[0] = true;
    cj8array[0] = 1; sj8array[0] = 0; j8array[0] = 0;
}
for(int ij8 = 0; ij8 < 2; ++ij8)
{
if( !j8valid[ij8] )
{
    continue;
}
_ij8[0] = ij8; _ij8[1] = -1;
for(int iij8 = ij8+1; iij8 < 2; ++iij8)
{
if( j8valid[iij8] && IKabs(cj8array[ij8]-cj8array[iij8]) < IKFAST_SOLUTION_THRESH && IKabs(sj8array[ij8]-sj8array[iij8]) < IKFAST_SOLUTION_THRESH )
{
    j8valid[iij8]=false; _ij8[1] = iij8; break; 
}
}
j8 = j8array[ij8]; cj8 = cj8array[ij8]; sj8 = sj8array[ij8];

{
IkReal j7eval[3];
j7eval[0]=sj8;
j7eval[1]=IKsign(sj8);
j7eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
j9eval[0]=sj8;
j9eval[1]=IKsign(sj8);
j9eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
j7eval[0]=new_r12;
j7eval[1]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j9mul = 1;
j9=0;
j7mul=-1.0;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r00));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].fmul = j7mul;
vinfos[0].freeind = 0;
vinfos[0].maxsolutions = 0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].fmul = j9mul;
vinfos[2].freeind = 0;
vinfos[2].maxsolutions = 0;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(1);
vfree[0] = 2;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
IkReal j9mul = 1;
j9=0;
j7mul=1.0;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7=IKatan2(new_r10, ((-1.0)*new_r11));
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].fmul = j7mul;
vinfos[0].freeind = 0;
vinfos[0].maxsolutions = 0;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].fmul = j9mul;
vinfos[2].freeind = 0;
vinfos[2].maxsolutions = 0;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(1);
vfree[0] = 2;
solutions.AddSolution(vinfos,vfree);
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x94=new_r22*new_r22;
IkReal x95=((16.0)*new_r10);
IkReal x96=((16.0)*new_r01);
IkReal x97=((16.0)*new_r22);
IkReal x98=((8.0)*new_r11);
IkReal x99=((8.0)*new_r00);
IkReal x100=(x94*x95);
IkReal x101=(x94*x96);
j7eval[0]=((IKabs(((((-1.0)*x101))+x96)))+(IKabs(((((32.0)*new_r11))+(((-16.0)*new_r11*x94))+(((-1.0)*new_r00*x97)))))+(IKabs((x100+(((-1.0)*x95)))))+(IKabs((((new_r22*x98))+(((-1.0)*x99)))))+(IKabs(((((16.0)*new_r00))+((new_r11*x97))+(((-32.0)*new_r00*x94)))))+(IKabs((x101+(((-1.0)*x96)))))+(IKabs(((((-1.0)*x100))+x95)))+(IKabs(((((-1.0)*new_r22*x99))+((x94*x98))))));
if( IKabs(j7eval[0]) < 0.0000000010000000  )
{
continue; // no branches [j7, j9]

} else
{
IkReal op[4+1], zeror[4];
int numroots;
IkReal j7evalpoly[1];
IkReal x102=new_r22*new_r22;
IkReal x103=((16.0)*new_r10);
IkReal x104=(new_r11*new_r22);
IkReal x105=(x102*x103);
IkReal x106=((((8.0)*x104))+(((-8.0)*new_r00)));
op[0]=x106;
op[1]=((((-1.0)*x105))+x103);
op[2]=((((16.0)*x104))+(((-32.0)*new_r00*x102))+(((16.0)*new_r00)));
op[3]=((((-1.0)*x103))+x105);
op[4]=x106;
polyroots4(op,zeror,numroots);
IkReal j7array[4], cj7array[4], sj7array[4], tempj7array[1];
int numsolutions = 0;
for(int ij7 = 0; ij7 < numroots; ++ij7)
{
IkReal htj7 = zeror[ij7];
tempj7array[0]=((2.0)*(atan(htj7)));
for(int kj7 = 0; kj7 < 1; ++kj7)
{
j7array[numsolutions] = tempj7array[kj7];
if( j7array[numsolutions] > IKPI )
{
    j7array[numsolutions]-=IK2PI;
}
else if( j7array[numsolutions] < -IKPI )
{
    j7array[numsolutions]+=IK2PI;
}
sj7array[numsolutions] = IKsin(j7array[numsolutions]);
cj7array[numsolutions] = IKcos(j7array[numsolutions]);
numsolutions++;
}
}
bool j7valid[4]={true,true,true,true};
_nj7 = 4;
for(int ij7 = 0; ij7 < numsolutions; ++ij7)
    {
if( !j7valid[ij7] )
{
    continue;
}
    j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
htj7 = IKtan(j7/2);

IkReal x107=new_r22*new_r22;
IkReal x108=((16.0)*new_r01);
IkReal x109=(new_r00*new_r22);
IkReal x110=((8.0)*x109);
IkReal x111=(new_r11*x107);
IkReal x112=(x107*x108);
IkReal x113=((8.0)*x111);
j7evalpoly[0]=((((htj7*htj7*htj7)*(((((-1.0)*x108))+x112))))+(((htj7*htj7)*(((((32.0)*new_r11))+(((-16.0)*x111))+(((-16.0)*x109))))))+(((-1.0)*x110))+x113+((htj7*(((((-1.0)*x112))+x108))))+(((htj7*htj7*htj7*htj7)*(((((-1.0)*x110))+x113)))));
if( IKabs(j7evalpoly[0]) > 0.0000000010000000  )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < numsolutions; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
{
IkReal j9eval[3];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
IkReal x114=cj7*cj7;
IkReal x115=new_r22*new_r22;
IkReal x116=((1.0)*cj7);
IkReal x117=(new_r22*sj7);
IkReal x118=(x115+x114+(((-1.0)*x114*x115)));
j9eval[0]=x118;
j9eval[1]=IKsign(x118);
j9eval[2]=((IKabs((((new_r11*x117))+(((-1.0)*new_r10*x116)))))+(IKabs(((((-1.0)*new_r11*x116))+(((-1.0)*new_r10*x117))))));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j9eval[0]=new_r22;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j9eval[0]=cj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r00, new_r01);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x119=IKsin(j9);
IkReal x120=IKcos(j9);
evalcond[0]=x120;
evalcond[1]=((-1.0)*x119);
evalcond[2]=(x119+(((-1.0)*new_r00)));
evalcond[3]=(x120+(((-1.0)*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[4];
IkReal x121=IKcos(j9);
IkReal x122=IKsin(j9);
evalcond[0]=x121;
evalcond[1]=(x122+new_r00);
evalcond[2]=(x121+new_r01);
evalcond[3]=((-1.0)*x122);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x123=new_r22*new_r22;
CheckValue<IkReal> x124=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x123))),-1);
if(!x124.valid){
continue;
}
if((((-1.0)*x123*(x124.value))) < -0.00001)
continue;
IkReal gconst12=IKsqrt(((-1.0)*x123*(x124.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj7+(((-1.0)*gconst12)))))+(IKabs(((-1.0)+(IKsign(sj7)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
IkReal x125=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
sj7=IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))));
cj7=gconst12;
if( (gconst12) < -1-IKFAST_SINCOS_THRESH || (gconst12) > 1+IKFAST_SINCOS_THRESH )
    continue;
j7=IKacos(gconst12);
CheckValue<IkReal> x126=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x125))),-1);
if(!x126.valid){
continue;
}
if((((-1.0)*x125*(x126.value))) < -0.00001)
continue;
IkReal gconst12=IKsqrt(((-1.0)*x125*(x126.value)));
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x127=IKPowWithIntegerCheck(gconst12,-1);
if(!x127.valid){
continue;
}
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
if( IKabs(((-1.0)*new_r10*(x127.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+(((-1.0)*gconst12*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10*(x127.value)))+IKsqr((((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+(((-1.0)*gconst12*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r10*(x127.value)), (((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+(((-1.0)*gconst12*new_r11))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x128=IKsin(j9);
IkReal x129=IKcos(j9);
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
IkReal x130=IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))));
IkReal x131=((1.0)*x130);
evalcond[0]=x129;
evalcond[1]=((-1.0)*x128);
evalcond[2]=(((gconst12*x128))+new_r10);
evalcond[3]=(((gconst12*x129))+new_r11);
evalcond[4]=((((-1.0)*x128*x131))+new_r00);
evalcond[5]=((((-1.0)*x129*x131))+new_r01);
evalcond[6]=((((-1.0)*new_r00*x131))+x128+((gconst12*new_r10)));
evalcond[7]=((((-1.0)*new_r01*x131))+x129+((gconst12*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x132 = IKatan2WithCheck(IkReal(((-1.0)*new_r10)),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x132.valid){
continue;
}
CheckValue<IkReal> x133=IKPowWithIntegerCheck(IKsign(gconst12),-1);
if(!x133.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x132.value)+(((1.5707963267949)*(x133.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x134=IKsin(j9);
IkReal x135=IKcos(j9);
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
IkReal x136=IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))));
IkReal x137=((1.0)*x136);
evalcond[0]=x135;
evalcond[1]=((-1.0)*x134);
evalcond[2]=(((gconst12*x134))+new_r10);
evalcond[3]=(((gconst12*x135))+new_r11);
evalcond[4]=((((-1.0)*x134*x137))+new_r00);
evalcond[5]=((((-1.0)*x135*x137))+new_r01);
evalcond[6]=((((-1.0)*new_r00*x137))+x134+((gconst12*new_r10)));
evalcond[7]=((((-1.0)*new_r01*x137))+x135+((gconst12*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x138=new_r22*new_r22;
CheckValue<IkReal> x139=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x138))),-1);
if(!x139.valid){
continue;
}
if((((-1.0)*x138*(x139.value))) < -0.00001)
continue;
IkReal gconst12=IKsqrt(((-1.0)*x138*(x139.value)));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj7+(((-1.0)*gconst12)))))+(IKabs(((1.0)+(IKsign(sj7)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
IkReal x140=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
sj7=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))))));
cj7=gconst12;
if( (gconst12) < -1-IKFAST_SINCOS_THRESH || (gconst12) > 1+IKFAST_SINCOS_THRESH )
    continue;
j7=((-1.0)*(IKacos(gconst12)));
CheckValue<IkReal> x141=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x140))),-1);
if(!x141.valid){
continue;
}
if((((-1.0)*x140*(x141.value))) < -0.00001)
continue;
IkReal gconst12=IKsqrt(((-1.0)*x140*(x141.value)));
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x142=IKPowWithIntegerCheck(gconst12,-1);
if(!x142.valid){
continue;
}
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
if( IKabs(((-1.0)*new_r10*(x142.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+(((-1.0)*gconst12*new_r11)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10*(x142.value)))+IKsqr(((((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+(((-1.0)*gconst12*new_r11))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r10*(x142.value)), ((((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12))))))))+(((-1.0)*gconst12*new_r11))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x143=IKsin(j9);
IkReal x144=IKcos(j9);
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
IkReal x145=IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))));
evalcond[0]=x144;
evalcond[1]=((-1.0)*x143);
evalcond[2]=(((gconst12*x143))+new_r10);
evalcond[3]=(((gconst12*x144))+new_r11);
evalcond[4]=(new_r00+((x143*x145)));
evalcond[5]=(((x144*x145))+new_r01);
evalcond[6]=(((new_r00*x145))+x143+((gconst12*new_r10)));
evalcond[7]=(((new_r01*x145))+x144+((gconst12*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x146 = IKatan2WithCheck(IkReal(((-1.0)*new_r10)),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x146.valid){
continue;
}
CheckValue<IkReal> x147=IKPowWithIntegerCheck(IKsign(gconst12),-1);
if(!x147.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x146.value)+(((1.5707963267949)*(x147.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x148=IKsin(j9);
IkReal x149=IKcos(j9);
if((((1.0)+(((-1.0)*(gconst12*gconst12))))) < -0.00001)
continue;
IkReal x150=IKsqrt(((1.0)+(((-1.0)*(gconst12*gconst12)))));
evalcond[0]=x149;
evalcond[1]=((-1.0)*x148);
evalcond[2]=(((gconst12*x148))+new_r10);
evalcond[3]=(((gconst12*x149))+new_r11);
evalcond[4]=(((x148*x150))+new_r00);
evalcond[5]=(((x149*x150))+new_r01);
evalcond[6]=(((new_r00*x150))+x148+((gconst12*new_r10)));
evalcond[7]=(((new_r01*x150))+x149+((gconst12*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x151=new_r22*new_r22;
CheckValue<IkReal> x152=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x151))),-1);
if(!x152.valid){
continue;
}
if((((-1.0)*x151*(x152.value))) < -0.00001)
continue;
IkReal gconst13=((-1.0)*(IKsqrt(((-1.0)*x151*(x152.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.0)+(IKsign(sj7)))))+(IKabs((cj7+(((-1.0)*gconst13)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
IkReal x153=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
sj7=IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))));
cj7=gconst13;
if( (gconst13) < -1-IKFAST_SINCOS_THRESH || (gconst13) > 1+IKFAST_SINCOS_THRESH )
    continue;
j7=IKacos(gconst13);
CheckValue<IkReal> x154=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x153))),-1);
if(!x154.valid){
continue;
}
if((((-1.0)*x153*(x154.value))) < -0.00001)
continue;
IkReal gconst13=((-1.0)*(IKsqrt(((-1.0)*x153*(x154.value)))));
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x155=IKPowWithIntegerCheck(gconst13,-1);
if(!x155.valid){
continue;
}
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
if( IKabs(((-1.0)*new_r10*(x155.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*gconst13*new_r11))+((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10*(x155.value)))+IKsqr(((((-1.0)*gconst13*new_r11))+((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13))))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r10*(x155.value)), ((((-1.0)*gconst13*new_r11))+((new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13))))))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x156=IKsin(j9);
IkReal x157=IKcos(j9);
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
IkReal x158=IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))));
IkReal x159=((1.0)*x158);
evalcond[0]=x157;
evalcond[1]=((-1.0)*x156);
evalcond[2]=(((gconst13*x156))+new_r10);
evalcond[3]=(((gconst13*x157))+new_r11);
evalcond[4]=((((-1.0)*x156*x159))+new_r00);
evalcond[5]=((((-1.0)*x157*x159))+new_r01);
evalcond[6]=(x156+((gconst13*new_r10))+(((-1.0)*new_r00*x159)));
evalcond[7]=(x157+((gconst13*new_r11))+(((-1.0)*new_r01*x159)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x160 = IKatan2WithCheck(IkReal(((-1.0)*new_r10)),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x160.valid){
continue;
}
CheckValue<IkReal> x161=IKPowWithIntegerCheck(IKsign(gconst13),-1);
if(!x161.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x160.value)+(((1.5707963267949)*(x161.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x162=IKsin(j9);
IkReal x163=IKcos(j9);
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
IkReal x164=IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))));
IkReal x165=((1.0)*x164);
evalcond[0]=x163;
evalcond[1]=((-1.0)*x162);
evalcond[2]=(new_r10+((gconst13*x162)));
evalcond[3]=(new_r11+((gconst13*x163)));
evalcond[4]=((((-1.0)*x162*x165))+new_r00);
evalcond[5]=((((-1.0)*x163*x165))+new_r01);
evalcond[6]=((((-1.0)*new_r00*x165))+x162+((gconst13*new_r10)));
evalcond[7]=(x163+((gconst13*new_r11))+(((-1.0)*new_r01*x165)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x166=new_r22*new_r22;
CheckValue<IkReal> x167=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x166))),-1);
if(!x167.valid){
continue;
}
if((((-1.0)*x166*(x167.value))) < -0.00001)
continue;
IkReal gconst13=((-1.0)*(IKsqrt(((-1.0)*x166*(x167.value)))));
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs((cj7+(((-1.0)*gconst13)))))+(IKabs(((1.0)+(IKsign(sj7)))))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
IkReal x168=new_r22*new_r22;
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
sj7=((-1.0)*(IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))))));
cj7=gconst13;
if( (gconst13) < -1-IKFAST_SINCOS_THRESH || (gconst13) > 1+IKFAST_SINCOS_THRESH )
    continue;
j7=((-1.0)*(IKacos(gconst13)));
CheckValue<IkReal> x169=IKPowWithIntegerCheck(((1.0)+(((-1.0)*x168))),-1);
if(!x169.valid){
continue;
}
if((((-1.0)*x168*(x169.value))) < -0.00001)
continue;
IkReal gconst13=((-1.0)*(IKsqrt(((-1.0)*x168*(x169.value)))));
j9eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j9eval[0]) < 0.0000010000000000  )
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x170=IKPowWithIntegerCheck(gconst13,-1);
if(!x170.valid){
continue;
}
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
if( IKabs(((-1.0)*new_r10*(x170.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*gconst13*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10*(x170.value)))+IKsqr(((((-1.0)*gconst13*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13))))))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r10*(x170.value)), ((((-1.0)*gconst13*new_r11))+(((-1.0)*new_r01*(IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13))))))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x171=IKsin(j9);
IkReal x172=IKcos(j9);
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
IkReal x173=IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))));
evalcond[0]=x172;
evalcond[1]=((-1.0)*x171);
evalcond[2]=(new_r10+((gconst13*x171)));
evalcond[3]=(new_r11+((gconst13*x172)));
evalcond[4]=(((x171*x173))+new_r00);
evalcond[5]=(((x172*x173))+new_r01);
evalcond[6]=(((new_r00*x173))+x171+((gconst13*new_r10)));
evalcond[7]=(((new_r01*x173))+x172+((gconst13*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x174 = IKatan2WithCheck(IkReal(((-1.0)*new_r10)),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x174.valid){
continue;
}
CheckValue<IkReal> x175=IKPowWithIntegerCheck(IKsign(gconst13),-1);
if(!x175.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(x174.value)+(((1.5707963267949)*(x175.value))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x176=IKsin(j9);
IkReal x177=IKcos(j9);
if((((1.0)+(((-1.0)*(gconst13*gconst13))))) < -0.00001)
continue;
IkReal x178=IKsqrt(((1.0)+(((-1.0)*(gconst13*gconst13)))));
evalcond[0]=x177;
evalcond[1]=((-1.0)*x176);
evalcond[2]=(new_r10+((gconst13*x176)));
evalcond[3]=(new_r11+((gconst13*x177)));
evalcond[4]=(((x176*x178))+new_r00);
evalcond[5]=(new_r01+((x177*x178)));
evalcond[6]=(((new_r00*x178))+x176+((gconst13*new_r10)));
evalcond[7]=(((new_r01*x178))+x177+((gconst13*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x179=(new_r01*new_r22);
IkReal x180=(cj7*new_r11);
CheckValue<IkReal> x181=IKPowWithIntegerCheck(cj7,-1);
if(!x181.valid){
continue;
}
if( IKabs(((x181.value)*((((x179*(cj7*cj7)))+(((-1.0)*x179))+((new_r22*sj7*x180))+(((-1.0)*new_r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r01*sj7))+(((-1.0)*x180)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((x181.value)*((((x179*(cj7*cj7)))+(((-1.0)*x179))+((new_r22*sj7*x180))+(((-1.0)*new_r10))))))+IKsqr((((new_r01*sj7))+(((-1.0)*x180))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((x181.value)*((((x179*(cj7*cj7)))+(((-1.0)*x179))+((new_r22*sj7*x180))+(((-1.0)*new_r10))))), (((new_r01*sj7))+(((-1.0)*x180))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x182=IKcos(j9);
IkReal x183=IKsin(j9);
IkReal x184=(cj7*new_r22);
IkReal x185=(new_r22*sj7);
IkReal x186=((1.0)*sj7);
IkReal x187=((1.0)*x183);
IkReal x188=(sj7*x182);
evalcond[0]=(x183+(((-1.0)*new_r00*x186))+((cj7*new_r10)));
evalcond[1]=(x182+(((-1.0)*new_r01*x186))+((cj7*new_r11)));
evalcond[2]=(((new_r10*sj7))+((new_r22*x182))+((cj7*new_r00)));
evalcond[3]=(((new_r10*x185))+((new_r00*x184))+x182);
evalcond[4]=(((cj7*x183))+new_r10+((x182*x185)));
evalcond[5]=(((new_r11*sj7))+(((-1.0)*new_r22*x187))+((cj7*new_r01)));
evalcond[6]=(new_r00+(((-1.0)*x183*x186))+((x182*x184)));
evalcond[7]=(((cj7*x182))+(((-1.0)*x185*x187))+new_r11);
evalcond[8]=(((new_r11*x185))+((new_r01*x184))+(((-1.0)*x187)));
evalcond[9]=((((-1.0)*x184*x187))+new_r01+(((-1.0)*x182*x186)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x189=((1.0)*new_r10);
CheckValue<IkReal> x190=IKPowWithIntegerCheck(new_r22,-1);
if(!x190.valid){
continue;
}
if( IKabs((((new_r00*sj7))+(((-1.0)*cj7*x189)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((x190.value)*(((((-1.0)*sj7*x189))+(((-1.0)*cj7*new_r00)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*sj7))+(((-1.0)*cj7*x189))))+IKsqr(((x190.value)*(((((-1.0)*sj7*x189))+(((-1.0)*cj7*new_r00))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((new_r00*sj7))+(((-1.0)*cj7*x189))), ((x190.value)*(((((-1.0)*sj7*x189))+(((-1.0)*cj7*new_r00))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x191=IKcos(j9);
IkReal x192=IKsin(j9);
IkReal x193=(cj7*new_r22);
IkReal x194=(new_r22*sj7);
IkReal x195=((1.0)*sj7);
IkReal x196=((1.0)*x192);
IkReal x197=(sj7*x191);
evalcond[0]=(x192+(((-1.0)*new_r00*x195))+((cj7*new_r10)));
evalcond[1]=(x191+(((-1.0)*new_r01*x195))+((cj7*new_r11)));
evalcond[2]=(((new_r10*sj7))+((new_r22*x191))+((cj7*new_r00)));
evalcond[3]=(((new_r10*x194))+((new_r00*x193))+x191);
evalcond[4]=(((cj7*x192))+((x191*x194))+new_r10);
evalcond[5]=(((new_r11*sj7))+(((-1.0)*new_r22*x196))+((cj7*new_r01)));
evalcond[6]=((((-1.0)*x192*x195))+((x191*x193))+new_r00);
evalcond[7]=((((-1.0)*x194*x196))+((cj7*x191))+new_r11);
evalcond[8]=(((new_r11*x194))+((new_r01*x193))+(((-1.0)*x196)));
evalcond[9]=((((-1.0)*x191*x195))+new_r01+(((-1.0)*x193*x196)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x198=cj7*cj7;
IkReal x199=new_r22*new_r22;
IkReal x200=(new_r22*sj7);
IkReal x201=((1.0)*new_r10);
CheckValue<IkReal> x202=IKPowWithIntegerCheck(IKsign((x199+x198+(((-1.0)*x198*x199)))),-1);
if(!x202.valid){
continue;
}
CheckValue<IkReal> x203 = IKatan2WithCheck(IkReal((((new_r11*x200))+(((-1.0)*cj7*x201)))),IkReal(((((-1.0)*x200*x201))+(((-1.0)*cj7*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x203.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x202.value)))+(x203.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[10];
IkReal x204=IKcos(j9);
IkReal x205=IKsin(j9);
IkReal x206=(cj7*new_r22);
IkReal x207=(new_r22*sj7);
IkReal x208=((1.0)*sj7);
IkReal x209=((1.0)*x205);
IkReal x210=(sj7*x204);
evalcond[0]=((((-1.0)*new_r00*x208))+x205+((cj7*new_r10)));
evalcond[1]=(x204+(((-1.0)*new_r01*x208))+((cj7*new_r11)));
evalcond[2]=(((new_r10*sj7))+((new_r22*x204))+((cj7*new_r00)));
evalcond[3]=(((new_r10*x207))+((new_r00*x206))+x204);
evalcond[4]=(((x204*x207))+new_r10+((cj7*x205)));
evalcond[5]=((((-1.0)*new_r22*x209))+((new_r11*sj7))+((cj7*new_r01)));
evalcond[6]=(((x204*x206))+(((-1.0)*x205*x208))+new_r00);
evalcond[7]=((((-1.0)*x207*x209))+new_r11+((cj7*x204)));
evalcond[8]=(((new_r11*x207))+((new_r01*x206))+(((-1.0)*x209)));
evalcond[9]=((((-1.0)*x204*x208))+(((-1.0)*x206*x209))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7, j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x212=IKPowWithIntegerCheck(sj8,-1);
if(!x212.valid){
continue;
}
IkReal x211=x212.value;
CheckValue<IkReal> x213=IKPowWithIntegerCheck(new_r12,-1);
if(!x213.valid){
continue;
}
if( IKabs((x211*(x213.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj8*cj8))))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x211)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x211*(x213.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj8*cj8)))))))+IKsqr((new_r02*x211))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x211*(x213.value)*(((1.0)+(((-1.0)*(new_r02*new_r02)))+(((-1.0)*(cj8*cj8)))))), (new_r02*x211));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x214=IKcos(j7);
IkReal x215=IKsin(j7);
IkReal x216=((1.0)*cj8);
IkReal x217=((1.0)*sj8);
IkReal x218=(new_r02*x214);
IkReal x219=(new_r12*x215);
IkReal x220=((1.0)*x215);
IkReal x221=(x214*x217);
evalcond[0]=(new_r02+(((-1.0)*x221)));
evalcond[1]=(new_r12+(((-1.0)*x215*x217)));
evalcond[2]=((((-1.0)*new_r02*x220))+((new_r12*x214)));
evalcond[3]=(x218+x219+(((-1.0)*x217)));
evalcond[4]=((((-1.0)*new_r22*x217))+((cj8*x219))+((cj8*x218)));
evalcond[5]=((((-1.0)*new_r10*x215*x217))+(((-1.0)*new_r20*x216))+(((-1.0)*new_r00*x221)));
evalcond[6]=((((-1.0)*new_r01*x221))+(((-1.0)*new_r11*x215*x217))+(((-1.0)*new_r21*x216)));
evalcond[7]=((1.0)+(((-1.0)*x217*x219))+(((-1.0)*x217*x218))+(((-1.0)*new_r22*x216)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[3];
j9eval[0]=sj8;
j9eval[1]=IKsign(sj8);
j9eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
j9eval[0]=sj8;
j9eval[1]=cj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
j9eval[0]=sj8;
j9eval[1]=cj8;
j9eval[2]=sj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x222=((1.0)*new_r10);
if( IKabs(((((-1.0)*cj7*x222))+((new_r00*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj7*new_r00))+(((-1.0)*sj7*x222)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj7*x222))+((new_r00*sj7))))+IKsqr(((((-1.0)*cj7*new_r00))+(((-1.0)*sj7*x222))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*cj7*x222))+((new_r00*sj7))), ((((-1.0)*cj7*new_r00))+(((-1.0)*sj7*x222))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x223=IKcos(j9);
IkReal x224=IKsin(j9);
IkReal x225=((1.0)*sj7);
IkReal x226=(cj7*x223);
IkReal x227=((1.0)*x224);
IkReal x228=(x224*x225);
evalcond[0]=(((new_r10*sj7))+x223+((cj7*new_r00)));
evalcond[1]=(x224+(((-1.0)*new_r00*x225))+((cj7*new_r10)));
evalcond[2]=((((-1.0)*new_r01*x225))+x223+((cj7*new_r11)));
evalcond[3]=(((sj7*x223))+((cj7*x224))+new_r10);
evalcond[4]=(((new_r11*sj7))+((cj7*new_r01))+(((-1.0)*x227)));
evalcond[5]=(x226+new_r00+(((-1.0)*x228)));
evalcond[6]=(x226+new_r11+(((-1.0)*x228)));
evalcond[7]=((((-1.0)*cj7*x227))+(((-1.0)*x223*x225))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x229=((1.0)*new_r11);
if( IKabs(((((-1.0)*cj7*new_r10))+(((-1.0)*sj7*x229)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj7*x229))+((new_r10*sj7)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj7*new_r10))+(((-1.0)*sj7*x229))))+IKsqr(((((-1.0)*cj7*x229))+((new_r10*sj7))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*cj7*new_r10))+(((-1.0)*sj7*x229))), ((((-1.0)*cj7*x229))+((new_r10*sj7))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x230=IKsin(j9);
IkReal x231=IKcos(j9);
IkReal x232=((1.0)*sj7);
IkReal x233=(cj7*x230);
IkReal x234=((1.0)*x231);
IkReal x235=(sj7*x230);
IkReal x236=(x231*x232);
evalcond[0]=(((new_r11*sj7))+x230+((cj7*new_r01)));
evalcond[1]=(x230+(((-1.0)*new_r00*x232))+((cj7*new_r10)));
evalcond[2]=(x231+(((-1.0)*new_r01*x232))+((cj7*new_r11)));
evalcond[3]=(((new_r10*sj7))+(((-1.0)*x234))+((cj7*new_r00)));
evalcond[4]=(x235+new_r11+((cj7*x231)));
evalcond[5]=((((-1.0)*x236))+x233+new_r10);
evalcond[6]=((((-1.0)*x236))+x233+new_r01);
evalcond[7]=((((-1.0)*x230*x232))+(((-1.0)*cj7*x234))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x237=IKsin(j9);
IkReal x238=IKcos(j9);
IkReal x239=((1.0)*sj7);
evalcond[0]=(x237+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x238)));
evalcond[2]=(new_r10+((cj7*x237)));
evalcond[3]=(new_r11+((cj7*x238)));
evalcond[4]=(new_r00+(((-1.0)*x237*x239)));
evalcond[5]=((((-1.0)*x238*x239))+new_r01);
evalcond[6]=(x237+(((-1.0)*new_r00*x239))+((cj7*new_r10)));
evalcond[7]=(x238+(((-1.0)*new_r01*x239))+((cj7*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x240=IKsin(j9);
IkReal x241=IKcos(j9);
IkReal x242=((1.0)*sj7);
evalcond[0]=(x241+new_r20);
evalcond[1]=((((-1.0)*x240))+new_r21);
evalcond[2]=(((cj7*x240))+new_r10);
evalcond[3]=(((cj7*x241))+new_r11);
evalcond[4]=((((-1.0)*x240*x242))+new_r00);
evalcond[5]=((((-1.0)*x241*x242))+new_r01);
evalcond[6]=((((-1.0)*new_r00*x242))+x240+((cj7*new_r10)));
evalcond[7]=((((-1.0)*new_r01*x242))+x241+((cj7*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x243=IKsin(j9);
IkReal x244=IKcos(j9);
IkReal x245=((1.0)*sj8);
IkReal x246=((1.0)*x243);
evalcond[0]=(x243+new_r10);
evalcond[1]=(x244+new_r11);
evalcond[2]=(((sj8*x243))+new_r21);
evalcond[3]=(((cj8*x244))+new_r00);
evalcond[4]=(new_r20+(((-1.0)*x244*x245)));
evalcond[5]=((((-1.0)*cj8*x246))+new_r01);
evalcond[6]=(x244+((cj8*new_r00))+(((-1.0)*new_r20*x245)));
evalcond[7]=((((-1.0)*new_r21*x245))+((cj8*new_r01))+(((-1.0)*x246)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r10, new_r11);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x247=IKsin(j9);
IkReal x248=IKcos(j9);
IkReal x249=((1.0)*cj8);
IkReal x250=((1.0)*sj8);
evalcond[0]=(((sj8*x247))+new_r21);
evalcond[1]=(x247+(((-1.0)*new_r10)));
evalcond[2]=(x248+(((-1.0)*new_r11)));
evalcond[3]=((((-1.0)*x248*x250))+new_r20);
evalcond[4]=(((cj8*x248))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*new_r01))+(((-1.0)*x247*x249)));
evalcond[6]=((((-1.0)*new_r00*x249))+x248+(((-1.0)*new_r20*x250)));
evalcond[7]=((((-1.0)*new_r21*x250))+(((-1.0)*new_r01*x249))+(((-1.0)*x247)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r00, new_r01);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x251=IKsin(j9);
IkReal x252=IKcos(j9);
IkReal x253=((1.0)*sj8);
IkReal x254=((1.0)*x251);
evalcond[0]=(((sj8*x251))+new_r21);
evalcond[1]=(x251+(((-1.0)*new_r00)));
evalcond[2]=(x252+(((-1.0)*new_r01)));
evalcond[3]=(((cj8*x252))+new_r10);
evalcond[4]=((((-1.0)*x252*x253))+new_r20);
evalcond[5]=((((-1.0)*cj8*x254))+new_r11);
evalcond[6]=(((cj8*new_r10))+x252+(((-1.0)*new_r20*x253)));
evalcond[7]=((((-1.0)*new_r21*x253))+((cj8*new_r11))+(((-1.0)*x254)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x255=IKsin(j9);
IkReal x256=IKcos(j9);
IkReal x257=((1.0)*cj8);
IkReal x258=((1.0)*sj8);
evalcond[0]=(x255+new_r00);
evalcond[1]=(x256+new_r01);
evalcond[2]=(((sj8*x255))+new_r21);
evalcond[3]=((((-1.0)*x256*x258))+new_r20);
evalcond[4]=(((cj8*x256))+(((-1.0)*new_r10)));
evalcond[5]=((((-1.0)*x255*x257))+(((-1.0)*new_r11)));
evalcond[6]=((((-1.0)*new_r10*x257))+x256+(((-1.0)*new_r20*x258)));
evalcond[7]=((((-1.0)*new_r21*x258))+(((-1.0)*new_r11*x257))+(((-1.0)*x255)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j9eval[0]=IKabs(new_r22);
if( IKabs(j9eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j9]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)*new_r22);
op[1]=0;
op[2]=new_r22;
polyroots2(op,zeror,numroots);
IkReal j9array[2], cj9array[2], sj9array[2], tempj9array[1];
int numsolutions = 0;
for(int ij9 = 0; ij9 < numroots; ++ij9)
{
IkReal htj9 = zeror[ij9];
tempj9array[0]=((2.0)*(atan(htj9)));
for(int kj9 = 0; kj9 < 1; ++kj9)
{
j9array[numsolutions] = tempj9array[kj9];
if( j9array[numsolutions] > IKPI )
{
    j9array[numsolutions]-=IK2PI;
}
else if( j9array[numsolutions] < -IKPI )
{
    j9array[numsolutions]+=IK2PI;
}
sj9array[numsolutions] = IKsin(j9array[numsolutions]);
cj9array[numsolutions] = IKcos(j9array[numsolutions]);
numsolutions++;
}
}
bool j9valid[2]={true,true};
_nj9 = 2;
for(int ij9 = 0; ij9 < numsolutions; ++ij9)
    {
if( !j9valid[ij9] )
{
    continue;
}
    j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
htj9 = IKtan(j9/2);

_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < numsolutions; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x260=IKPowWithIntegerCheck(sj8,-1);
if(!x260.valid){
continue;
}
IkReal x259=x260.value;
CheckValue<IkReal> x261=IKPowWithIntegerCheck(cj8,-1);
if(!x261.valid){
continue;
}
CheckValue<IkReal> x262=IKPowWithIntegerCheck(sj7,-1);
if(!x262.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x259)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x259*(x261.value)*(x262.value)*((((cj7*new_r21))+(((-1.0)*new_r10*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x259))+IKsqr((x259*(x261.value)*(x262.value)*((((cj7*new_r21))+(((-1.0)*new_r10*sj8))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r21*x259), (x259*(x261.value)*(x262.value)*((((cj7*new_r21))+(((-1.0)*new_r10*sj8))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x263=IKsin(j9);
IkReal x264=IKcos(j9);
IkReal x265=((1.0)*sj7);
IkReal x266=((1.0)*sj8);
IkReal x267=(cj7*new_r01);
IkReal x268=(new_r10*sj7);
IkReal x269=(new_r11*sj7);
IkReal x270=(cj7*cj8);
IkReal x271=(cj7*x264);
IkReal x272=((1.0)*x263);
IkReal x273=(cj8*x264);
evalcond[0]=(new_r21+((sj8*x263)));
evalcond[1]=(new_r20+(((-1.0)*x264*x266)));
evalcond[2]=((((-1.0)*new_r00*x265))+x263+((cj7*new_r10)));
evalcond[3]=((((-1.0)*new_r01*x265))+x264+((cj7*new_r11)));
evalcond[4]=(x268+x273+((cj7*new_r00)));
evalcond[5]=(((cj7*x263))+((sj7*x273))+new_r10);
evalcond[6]=((((-1.0)*cj8*x272))+x267+x269);
evalcond[7]=((((-1.0)*x263*x265))+((x264*x270))+new_r00);
evalcond[8]=((((-1.0)*cj8*x263*x265))+x271+new_r11);
evalcond[9]=((((-1.0)*x270*x272))+new_r01+(((-1.0)*x264*x265)));
evalcond[10]=(((cj8*x268))+x264+(((-1.0)*new_r20*x266))+((new_r00*x270)));
evalcond[11]=((((-1.0)*new_r21*x266))+((cj8*x269))+((cj8*x267))+(((-1.0)*x272)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x275=IKPowWithIntegerCheck(sj8,-1);
if(!x275.valid){
continue;
}
IkReal x274=x275.value;
CheckValue<IkReal> x276=IKPowWithIntegerCheck(cj7,-1);
if(!x276.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x274)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x274*(x276.value)*(((((-1.0)*cj8*new_r21*sj7))+(((-1.0)*new_r11*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x274))+IKsqr((x274*(x276.value)*(((((-1.0)*cj8*new_r21*sj7))+(((-1.0)*new_r11*sj8))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r21*x274), (x274*(x276.value)*(((((-1.0)*cj8*new_r21*sj7))+(((-1.0)*new_r11*sj8))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x277=IKsin(j9);
IkReal x278=IKcos(j9);
IkReal x279=((1.0)*sj7);
IkReal x280=((1.0)*sj8);
IkReal x281=(cj7*new_r01);
IkReal x282=(new_r10*sj7);
IkReal x283=(new_r11*sj7);
IkReal x284=(cj7*cj8);
IkReal x285=(cj7*x278);
IkReal x286=((1.0)*x277);
IkReal x287=(cj8*x278);
evalcond[0]=(((sj8*x277))+new_r21);
evalcond[1]=(new_r20+(((-1.0)*x278*x280)));
evalcond[2]=((((-1.0)*new_r00*x279))+x277+((cj7*new_r10)));
evalcond[3]=((((-1.0)*new_r01*x279))+x278+((cj7*new_r11)));
evalcond[4]=(x287+x282+((cj7*new_r00)));
evalcond[5]=(((cj7*x277))+((sj7*x287))+new_r10);
evalcond[6]=((((-1.0)*cj8*x286))+x283+x281);
evalcond[7]=((((-1.0)*x277*x279))+((x278*x284))+new_r00);
evalcond[8]=(x285+(((-1.0)*cj8*x277*x279))+new_r11);
evalcond[9]=((((-1.0)*x284*x286))+(((-1.0)*x278*x279))+new_r01);
evalcond[10]=(x278+((cj8*x282))+(((-1.0)*new_r20*x280))+((new_r00*x284)));
evalcond[11]=(((cj8*x283))+((cj8*x281))+(((-1.0)*x286))+(((-1.0)*new_r21*x280)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x288=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x288.valid){
continue;
}
CheckValue<IkReal> x289 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x289.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x288.value)))+(x289.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x290=IKsin(j9);
IkReal x291=IKcos(j9);
IkReal x292=((1.0)*sj7);
IkReal x293=((1.0)*sj8);
IkReal x294=(cj7*new_r01);
IkReal x295=(new_r10*sj7);
IkReal x296=(new_r11*sj7);
IkReal x297=(cj7*cj8);
IkReal x298=(cj7*x291);
IkReal x299=((1.0)*x290);
IkReal x300=(cj8*x291);
evalcond[0]=(((sj8*x290))+new_r21);
evalcond[1]=((((-1.0)*x291*x293))+new_r20);
evalcond[2]=(x290+(((-1.0)*new_r00*x292))+((cj7*new_r10)));
evalcond[3]=((((-1.0)*new_r01*x292))+x291+((cj7*new_r11)));
evalcond[4]=(x300+x295+((cj7*new_r00)));
evalcond[5]=(((sj7*x300))+((cj7*x290))+new_r10);
evalcond[6]=((((-1.0)*cj8*x299))+x294+x296);
evalcond[7]=(((x291*x297))+(((-1.0)*x290*x292))+new_r00);
evalcond[8]=((((-1.0)*cj8*x290*x292))+x298+new_r11);
evalcond[9]=((((-1.0)*x291*x292))+(((-1.0)*x297*x299))+new_r01);
evalcond[10]=(((cj8*x295))+(((-1.0)*new_r20*x293))+((new_r00*x297))+x291);
evalcond[11]=(((cj8*x296))+((cj8*x294))+(((-1.0)*new_r21*x293))+(((-1.0)*x299)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x301=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x301.valid){
continue;
}
CheckValue<IkReal> x302 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x302.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x301.value)))+(x302.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[2];
evalcond[0]=(((sj8*(IKsin(j9))))+new_r21);
evalcond[1]=((((-1.0)*sj8*(IKcos(j9))))+new_r20);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j7eval[3];
j7eval[0]=sj8;
j7eval[1]=IKsign(sj8);
j7eval[2]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
j7eval[0]=new_r00;
j7eval[1]=sj8;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=0;
cj8=1.0;
j8=0;
IkReal x303=((1.0)*new_r10);
IkReal x304=((new_r10*new_r10)+(new_r00*new_r00));
j7eval[0]=x304;
j7eval[1]=((IKabs(((((-1.0)*cj9*new_r00))+(((-1.0)*sj9*x303)))))+(IKabs((((new_r00*sj9))+(((-1.0)*cj9*x303))))));
j7eval[2]=IKsign(x304);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=0;
cj8=1.0;
j8=0;
IkReal x305=((1.0)*cj9);
IkReal x306=(((new_r10*new_r11))+((new_r00*new_r01)));
j7eval[0]=x306;
j7eval[1]=((IKabs(((((-1.0)*new_r01*x305))+(((-1.0)*new_r10*x305)))))+(IKabs((((cj9*new_r00))+(((-1.0)*new_r11*x305))))));
j7eval[2]=IKsign(x306);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=0;
cj8=1.0;
j8=0;
IkReal x307=((1.0)*new_r10);
IkReal x308=(((cj9*new_r00))+(((-1.0)*sj9*x307)));
j7eval[0]=x308;
j7eval[1]=((IKabs((((cj9*sj9))+(((-1.0)*new_r00*x307)))))+(IKabs(((((-1.0)*(cj9*cj9)))+(new_r10*new_r10)))));
j7eval[2]=IKsign(x308);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x311 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x311)==0){
continue;
}
IkReal x309=pow(x311,-0.5);
IkReal x310=((-1.0)*x309);
CheckValue<IkReal> x312 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x312.valid){
continue;
}
IkReal gconst0=((-1.0)*(x312.value));
IkReal gconst1=(new_r00*x310);
IkReal gconst2=(new_r10*x310);
CheckValue<IkReal> x313 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x313.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x313.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[2];
CheckValue<IkReal> x317 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x317.valid){
continue;
}
IkReal x314=((-1.0)*(x317.value));
IkReal x315=x309;
IkReal x316=((-1.0)*x315);
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst1;
cj9=gconst2;
j9=x314;
IkReal gconst0=x314;
IkReal gconst1=(new_r00*x316);
IkReal gconst2=(new_r10*x316);
IkReal x318=((new_r10*new_r10)+(new_r00*new_r00));
j7eval[0]=x318;
j7eval[1]=IKsign(x318);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x322 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x322.valid){
continue;
}
IkReal x319=((-1.0)*(x322.value));
IkReal x320=x309;
IkReal x321=((-1.0)*x320);
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst1;
cj9=gconst2;
j9=x319;
IkReal gconst0=x319;
IkReal gconst1=(new_r00*x321);
IkReal gconst2=(new_r10*x321);
IkReal x323=new_r10*new_r10;
IkReal x324=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x325=x309;
IkReal x326=(new_r10*x325);
j7eval[0]=x324;
j7eval[1]=IKsign(x324);
j7eval[2]=((IKabs((((new_r01*x326))+((x323*x325)))))+(IKabs(((((-1.0)*new_r00*x326))+((new_r11*x326))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x330 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x330.valid){
continue;
}
IkReal x327=((-1.0)*(x330.value));
IkReal x328=x309;
IkReal x329=((-1.0)*x328);
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst1;
cj9=gconst2;
j9=x327;
IkReal gconst0=x327;
IkReal gconst1=(new_r00*x329);
IkReal gconst2=(new_r10*x329);
IkReal x331=new_r10*new_r10;
IkReal x332=new_r00*new_r00;
CheckValue<IkReal> x339=IKPowWithIntegerCheck((x332+x331),-1);
if(!x339.valid){
continue;
}
IkReal x333=x339.value;
IkReal x334=(x331*x333);
CheckValue<IkReal> x340=IKPowWithIntegerCheck(((((-1.0)*x332))+(((-1.0)*x331))),-1);
if(!x340.valid){
continue;
}
IkReal x335=x340.value;
IkReal x336=((1.0)*x335);
IkReal x337=(new_r00*x336);
IkReal x338=(new_r10*x336);
j7eval[0]=((IKabs((((x332*x334))+((x333*(x332*x332)))+(((-1.0)*x334)))))+(IKabs(((((-1.0)*new_r10*x337*(new_r00*new_r00)))+(((-1.0)*new_r10*x337))+(((-1.0)*x337*(new_r10*new_r10*new_r10)))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x341 = IKatan2WithCheck(IkReal(((((-1.0)*(gconst2*gconst2)))+(new_r00*new_r00))),IkReal(((((-1.0)*gconst1*gconst2))+(((-1.0)*new_r00*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x341.valid){
continue;
}
CheckValue<IkReal> x342=IKPowWithIntegerCheck(IKsign((((gconst2*new_r10))+((gconst1*new_r00)))),-1);
if(!x342.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x341.value)+(((1.5707963267949)*(x342.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x343=IKcos(j7);
IkReal x344=IKsin(j7);
IkReal x345=(gconst2*x343);
IkReal x346=(gconst1*x343);
IkReal x347=((1.0)*x344);
IkReal x348=(gconst1*x347);
evalcond[0]=(gconst2+((new_r00*x343))+((new_r10*x344)));
evalcond[1]=(x346+new_r10+((gconst2*x344)));
evalcond[2]=(gconst1+((new_r10*x343))+(((-1.0)*new_r00*x347)));
evalcond[3]=(gconst2+((new_r11*x343))+(((-1.0)*new_r01*x347)));
evalcond[4]=(x345+new_r00+(((-1.0)*x348)));
evalcond[5]=(x345+new_r11+(((-1.0)*x348)));
evalcond[6]=(((new_r11*x344))+(((-1.0)*gconst1))+((new_r01*x343)));
evalcond[7]=((((-1.0)*gconst2*x347))+new_r01+(((-1.0)*x346)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x349=((1.0)*gconst2);
CheckValue<IkReal> x350 = IKatan2WithCheck(IkReal(((((-1.0)*new_r11*x349))+((gconst2*new_r00)))),IkReal(((((-1.0)*new_r10*x349))+(((-1.0)*new_r01*x349)))),IKFAST_ATAN2_MAGTHRESH);
if(!x350.valid){
continue;
}
CheckValue<IkReal> x351=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x351.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x350.value)+(((1.5707963267949)*(x351.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x352=IKcos(j7);
IkReal x353=IKsin(j7);
IkReal x354=(gconst2*x352);
IkReal x355=(gconst1*x352);
IkReal x356=((1.0)*x353);
IkReal x357=(gconst1*x356);
evalcond[0]=(gconst2+((new_r10*x353))+((new_r00*x352)));
evalcond[1]=(((gconst2*x353))+x355+new_r10);
evalcond[2]=(gconst1+(((-1.0)*new_r00*x356))+((new_r10*x352)));
evalcond[3]=(gconst2+(((-1.0)*new_r01*x356))+((new_r11*x352)));
evalcond[4]=((((-1.0)*x357))+x354+new_r00);
evalcond[5]=((((-1.0)*x357))+x354+new_r11);
evalcond[6]=(((new_r01*x352))+(((-1.0)*gconst1))+((new_r11*x353)));
evalcond[7]=((((-1.0)*x355))+(((-1.0)*gconst2*x356))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x358=((1.0)*new_r10);
CheckValue<IkReal> x359=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x359.valid){
continue;
}
CheckValue<IkReal> x360 = IKatan2WithCheck(IkReal((((gconst1*new_r00))+(((-1.0)*gconst2*x358)))),IkReal(((((-1.0)*gconst1*x358))+(((-1.0)*gconst2*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x360.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x359.value)))+(x360.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x361=IKcos(j7);
IkReal x362=IKsin(j7);
IkReal x363=(gconst2*x361);
IkReal x364=(gconst1*x361);
IkReal x365=((1.0)*x362);
IkReal x366=(gconst1*x365);
evalcond[0]=(gconst2+((new_r00*x361))+((new_r10*x362)));
evalcond[1]=(((gconst2*x362))+x364+new_r10);
evalcond[2]=((((-1.0)*new_r00*x365))+gconst1+((new_r10*x361)));
evalcond[3]=(gconst2+(((-1.0)*new_r01*x365))+((new_r11*x361)));
evalcond[4]=((((-1.0)*x366))+x363+new_r00);
evalcond[5]=((((-1.0)*x366))+x363+new_r11);
evalcond[6]=((((-1.0)*gconst1))+((new_r01*x361))+((new_r11*x362)));
evalcond[7]=((((-1.0)*x364))+new_r01+(((-1.0)*gconst2*x365)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x369 = ((new_r10*new_r10)+(new_r00*new_r00));
if(IKabs(x369)==0){
continue;
}
IkReal x367=pow(x369,-0.5);
IkReal x368=((1.0)*x367);
CheckValue<IkReal> x370 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x370.valid){
continue;
}
IkReal gconst3=((3.14159265358979)+(((-1.0)*(x370.value))));
IkReal gconst4=(new_r00*x368);
IkReal gconst5=(new_r10*x368);
CheckValue<IkReal> x371 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x371.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x371.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[2];
CheckValue<IkReal> x375 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x375.valid){
continue;
}
IkReal x372=((1.0)*(x375.value));
IkReal x373=x367;
IkReal x374=((1.0)*x373);
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x372)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x372)));
IkReal gconst4=(new_r00*x374);
IkReal gconst5=(new_r10*x374);
IkReal x376=((new_r10*new_r10)+(new_r00*new_r00));
j7eval[0]=x376;
j7eval[1]=IKsign(x376);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x380 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x380.valid){
continue;
}
IkReal x377=((1.0)*(x380.value));
IkReal x378=x367;
IkReal x379=((1.0)*x378);
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x377)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x377)));
IkReal gconst4=(new_r00*x379);
IkReal gconst5=(new_r10*x379);
IkReal x381=new_r10*new_r10;
IkReal x382=(new_r10*new_r11);
IkReal x383=(((new_r00*new_r01))+x382);
IkReal x384=x367;
IkReal x385=((1.0)*x384);
j7eval[0]=x383;
j7eval[1]=((IKabs((((new_r00*new_r10*x384))+(((-1.0)*x382*x385)))))+(IKabs(((((-1.0)*x381*x385))+(((-1.0)*new_r01*new_r10*x385))))));
j7eval[2]=IKsign(x383);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x389 = IKatan2WithCheck(IkReal(new_r00),IkReal(((-1.0)*new_r10)),IKFAST_ATAN2_MAGTHRESH);
if(!x389.valid){
continue;
}
IkReal x386=((1.0)*(x389.value));
IkReal x387=x367;
IkReal x388=((1.0)*x387);
sj8=0;
cj8=1.0;
j8=0;
sj9=gconst4;
cj9=gconst5;
j9=((3.14159265)+(((-1.0)*x386)));
IkReal gconst3=((3.14159265358979)+(((-1.0)*x386)));
IkReal gconst4=(new_r00*x388);
IkReal gconst5=(new_r10*x388);
IkReal x390=new_r10*new_r10;
IkReal x391=new_r00*new_r00;
CheckValue<IkReal> x398=IKPowWithIntegerCheck((x391+x390),-1);
if(!x398.valid){
continue;
}
IkReal x392=x398.value;
IkReal x393=(x390*x392);
CheckValue<IkReal> x399=IKPowWithIntegerCheck(((((-1.0)*x390))+(((-1.0)*x391))),-1);
if(!x399.valid){
continue;
}
IkReal x394=x399.value;
IkReal x395=((1.0)*x394);
IkReal x396=(new_r00*x395);
IkReal x397=(new_r10*x395);
j7eval[0]=((IKabs(((((-1.0)*x393))+((x392*(x391*x391)))+((x391*x393)))))+(IKabs(((((-1.0)*new_r10*x396*(new_r00*new_r00)))+(((-1.0)*x396*(new_r10*new_r10*new_r10)))+(((-1.0)*new_r10*x396))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x400=IKPowWithIntegerCheck(IKsign((((gconst4*new_r00))+((gconst5*new_r10)))),-1);
if(!x400.valid){
continue;
}
CheckValue<IkReal> x401 = IKatan2WithCheck(IkReal(((((-1.0)*(gconst5*gconst5)))+(new_r00*new_r00))),IkReal(((((-1.0)*gconst4*gconst5))+(((-1.0)*new_r00*new_r10)))),IKFAST_ATAN2_MAGTHRESH);
if(!x401.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x400.value)))+(x401.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x402=IKsin(j7);
IkReal x403=IKcos(j7);
IkReal x404=((1.0)*gconst4);
IkReal x405=(gconst5*x403);
IkReal x406=((1.0)*x402);
IkReal x407=(x402*x404);
evalcond[0]=(gconst5+((new_r10*x402))+((new_r00*x403)));
evalcond[1]=(((gconst4*x403))+new_r10+((gconst5*x402)));
evalcond[2]=(gconst4+((new_r10*x403))+(((-1.0)*new_r00*x406)));
evalcond[3]=(gconst5+((new_r11*x403))+(((-1.0)*new_r01*x406)));
evalcond[4]=(x405+new_r00+(((-1.0)*x407)));
evalcond[5]=(x405+new_r11+(((-1.0)*x407)));
evalcond[6]=(((new_r11*x402))+((new_r01*x403))+(((-1.0)*x404)));
evalcond[7]=((((-1.0)*gconst5*x406))+(((-1.0)*x403*x404))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x408=((1.0)*gconst5);
CheckValue<IkReal> x409=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x409.valid){
continue;
}
CheckValue<IkReal> x410 = IKatan2WithCheck(IkReal((((gconst5*new_r00))+(((-1.0)*new_r11*x408)))),IkReal(((((-1.0)*new_r10*x408))+(((-1.0)*new_r01*x408)))),IKFAST_ATAN2_MAGTHRESH);
if(!x410.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x409.value)))+(x410.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x411=IKsin(j7);
IkReal x412=IKcos(j7);
IkReal x413=((1.0)*gconst4);
IkReal x414=(gconst5*x412);
IkReal x415=((1.0)*x411);
IkReal x416=(x411*x413);
evalcond[0]=(gconst5+((new_r10*x411))+((new_r00*x412)));
evalcond[1]=(((gconst5*x411))+new_r10+((gconst4*x412)));
evalcond[2]=(gconst4+((new_r10*x412))+(((-1.0)*new_r00*x415)));
evalcond[3]=(gconst5+((new_r11*x412))+(((-1.0)*new_r01*x415)));
evalcond[4]=(x414+new_r00+(((-1.0)*x416)));
evalcond[5]=(x414+new_r11+(((-1.0)*x416)));
evalcond[6]=(((new_r11*x411))+(((-1.0)*x413))+((new_r01*x412)));
evalcond[7]=((((-1.0)*x412*x413))+(((-1.0)*gconst5*x415))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x417=((1.0)*new_r10);
CheckValue<IkReal> x418=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x418.valid){
continue;
}
CheckValue<IkReal> x419 = IKatan2WithCheck(IkReal((((gconst4*new_r00))+(((-1.0)*gconst5*x417)))),IkReal(((((-1.0)*gconst4*x417))+(((-1.0)*gconst5*new_r00)))),IKFAST_ATAN2_MAGTHRESH);
if(!x419.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x418.value)))+(x419.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x420=IKsin(j7);
IkReal x421=IKcos(j7);
IkReal x422=((1.0)*gconst4);
IkReal x423=(gconst5*x421);
IkReal x424=((1.0)*x420);
IkReal x425=(x420*x422);
evalcond[0]=(gconst5+((new_r10*x420))+((new_r00*x421)));
evalcond[1]=(((gconst4*x421))+((gconst5*x420))+new_r10);
evalcond[2]=((((-1.0)*new_r00*x424))+gconst4+((new_r10*x421)));
evalcond[3]=(gconst5+((new_r11*x421))+(((-1.0)*new_r01*x424)));
evalcond[4]=((((-1.0)*x425))+x423+new_r00);
evalcond[5]=((((-1.0)*x425))+x423+new_r11);
evalcond[6]=((((-1.0)*x422))+((new_r11*x420))+((new_r01*x421)));
evalcond[7]=((((-1.0)*x421*x422))+new_r01+(((-1.0)*gconst5*x424)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(((-1.0)*new_r10))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r00, ((-1.0)*new_r10));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x426=IKcos(j7);
IkReal x427=IKsin(j7);
IkReal x428=((1.0)*x427);
evalcond[0]=(x426+new_r10);
evalcond[1]=((((-1.0)*x428))+new_r00);
evalcond[2]=((((-1.0)*x428))+new_r11);
evalcond[3]=((((-1.0)*x426))+new_r01);
evalcond[4]=(((new_r10*x427))+((new_r00*x426)));
evalcond[5]=(((new_r11*x426))+(((-1.0)*new_r01*x428)));
evalcond[6]=((-1.0)+((new_r11*x427))+((new_r01*x426)));
evalcond[7]=((1.0)+(((-1.0)*new_r00*x428))+((new_r10*x426)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x429=IKsin(j7);
IkReal x430=IKcos(j7);
IkReal x431=((1.0)*x429);
evalcond[0]=(x429+new_r00);
evalcond[1]=(x429+new_r11);
evalcond[2]=(x430+new_r01);
evalcond[3]=((((-1.0)*x430))+new_r10);
evalcond[4]=(((new_r00*x430))+((new_r10*x429)));
evalcond[5]=((((-1.0)*new_r01*x431))+((new_r11*x430)));
evalcond[6]=((1.0)+((new_r01*x430))+((new_r11*x429)));
evalcond[7]=((-1.0)+(((-1.0)*new_r00*x431))+((new_r10*x430)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r10*new_r10)+(new_r00*new_r00));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=1.0;
j8=0;
new_r10=0;
new_r00=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x433 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x433.valid){
continue;
}
IkReal x432=x433.value;
j7array[0]=((-1.0)*x432);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x432)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r01*(IKsin(j7))))+((new_r11*(IKcos(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=1.0;
j8=0;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x435 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x435.valid){
continue;
}
IkReal x434=x435.value;
j7array[0]=((-1.0)*x434);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x434)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r01*(IKsin(j7))))+((new_r11*(IKcos(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x436=((1.0)*new_r10);
CheckValue<IkReal> x437 = IKatan2WithCheck(IkReal(((((-1.0)*new_r00*x436))+((cj9*sj9)))),IkReal(((((-1.0)*(cj9*cj9)))+(new_r10*new_r10))),IKFAST_ATAN2_MAGTHRESH);
if(!x437.valid){
continue;
}
CheckValue<IkReal> x438=IKPowWithIntegerCheck(IKsign(((((-1.0)*sj9*x436))+((cj9*new_r00)))),-1);
if(!x438.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x437.value)+(((1.5707963267949)*(x438.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x439=IKcos(j7);
IkReal x440=IKsin(j7);
IkReal x441=((1.0)*sj9);
IkReal x442=(cj9*x439);
IkReal x443=((1.0)*x440);
IkReal x444=(x440*x441);
evalcond[0]=(((new_r00*x439))+cj9+((new_r10*x440)));
evalcond[1]=(((cj9*x440))+((sj9*x439))+new_r10);
evalcond[2]=((((-1.0)*new_r00*x443))+sj9+((new_r10*x439)));
evalcond[3]=(cj9+(((-1.0)*new_r01*x443))+((new_r11*x439)));
evalcond[4]=((((-1.0)*x444))+x442+new_r00);
evalcond[5]=((((-1.0)*x444))+x442+new_r11);
evalcond[6]=((((-1.0)*x441))+((new_r01*x439))+((new_r11*x440)));
evalcond[7]=((((-1.0)*cj9*x443))+(((-1.0)*x439*x441))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x445=((1.0)*cj9);
CheckValue<IkReal> x446 = IKatan2WithCheck(IkReal((((cj9*new_r00))+(((-1.0)*new_r11*x445)))),IkReal(((((-1.0)*new_r01*x445))+(((-1.0)*new_r10*x445)))),IKFAST_ATAN2_MAGTHRESH);
if(!x446.valid){
continue;
}
CheckValue<IkReal> x447=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x447.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x446.value)+(((1.5707963267949)*(x447.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x448=IKcos(j7);
IkReal x449=IKsin(j7);
IkReal x450=((1.0)*sj9);
IkReal x451=(cj9*x448);
IkReal x452=((1.0)*x449);
IkReal x453=(x449*x450);
evalcond[0]=(((new_r00*x448))+cj9+((new_r10*x449)));
evalcond[1]=(((cj9*x449))+((sj9*x448))+new_r10);
evalcond[2]=(sj9+(((-1.0)*new_r00*x452))+((new_r10*x448)));
evalcond[3]=(cj9+(((-1.0)*new_r01*x452))+((new_r11*x448)));
evalcond[4]=((((-1.0)*x453))+x451+new_r00);
evalcond[5]=((((-1.0)*x453))+x451+new_r11);
evalcond[6]=(((new_r01*x448))+(((-1.0)*x450))+((new_r11*x449)));
evalcond[7]=((((-1.0)*cj9*x452))+new_r01+(((-1.0)*x448*x450)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x454=((1.0)*new_r10);
CheckValue<IkReal> x455=IKPowWithIntegerCheck(IKsign(((new_r10*new_r10)+(new_r00*new_r00))),-1);
if(!x455.valid){
continue;
}
CheckValue<IkReal> x456 = IKatan2WithCheck(IkReal((((new_r00*sj9))+(((-1.0)*cj9*x454)))),IkReal(((((-1.0)*cj9*new_r00))+(((-1.0)*sj9*x454)))),IKFAST_ATAN2_MAGTHRESH);
if(!x456.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x455.value)))+(x456.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x457=IKcos(j7);
IkReal x458=IKsin(j7);
IkReal x459=((1.0)*sj9);
IkReal x460=(cj9*x457);
IkReal x461=((1.0)*x458);
IkReal x462=(x458*x459);
evalcond[0]=(((new_r10*x458))+cj9+((new_r00*x457)));
evalcond[1]=(((sj9*x457))+((cj9*x458))+new_r10);
evalcond[2]=(((new_r10*x457))+sj9+(((-1.0)*new_r00*x461)));
evalcond[3]=(((new_r11*x457))+cj9+(((-1.0)*new_r01*x461)));
evalcond[4]=((((-1.0)*x462))+x460+new_r00);
evalcond[5]=((((-1.0)*x462))+x460+new_r11);
evalcond[6]=(((new_r11*x458))+((new_r01*x457))+(((-1.0)*x459)));
evalcond[7]=((((-1.0)*cj9*x461))+new_r01+(((-1.0)*x457*x459)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x463=((1.0)*sj9);
IkReal x464=(((new_r10*new_r11))+((new_r00*new_r01)));
j7eval[0]=x464;
j7eval[1]=IKsign(x464);
j7eval[2]=((IKabs(((((-1.0)*new_r11*x463))+(((-1.0)*new_r00*x463)))))+(IKabs((((new_r01*sj9))+(((-1.0)*new_r10*x463))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x465=((1.0)*new_r11);
IkReal x466=((new_r01*new_r01)+(new_r11*new_r11));
j7eval[0]=x466;
j7eval[1]=((IKabs(((((-1.0)*new_r01*sj9))+(((-1.0)*cj9*x465)))))+(IKabs((((cj9*new_r01))+(((-1.0)*sj9*x465))))));
j7eval[2]=IKsign(x466);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
IkReal x467=(((new_r11*sj9))+((cj9*new_r01)));
j7eval[0]=x467;
j7eval[1]=IKsign(x467);
j7eval[2]=((IKabs(((((-1.0)*cj9*sj9))+(((-1.0)*new_r10*new_r11)))))+(IKabs(((-1.0)+((new_r01*new_r10))+(cj9*cj9)))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[1];
bool bgotonextstatement = true;
do
{
IkReal x469 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x469)==0){
continue;
}
IkReal x468=pow(x469,-0.5);
CheckValue<IkReal> x470 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x470.valid){
continue;
}
IkReal gconst6=((-1.0)*(x470.value));
IkReal gconst7=((-1.0)*new_r01*x468);
IkReal gconst8=(new_r11*x468);
CheckValue<IkReal> x471 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x471.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((x471.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
CheckValue<IkReal> x474 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x474.valid){
continue;
}
IkReal x472=((-1.0)*(x474.value));
IkReal x473=x468;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst7;
cj9=gconst8;
j9=x472;
IkReal gconst6=x472;
IkReal gconst7=((-1.0)*new_r01*x473);
IkReal gconst8=(new_r11*x473);
IkReal x475=new_r01*new_r01;
IkReal x476=(new_r00*new_r01);
IkReal x477=(((new_r10*new_r11))+x476);
IkReal x478=x468;
IkReal x479=(new_r01*x478);
j7eval[0]=x477;
j7eval[1]=IKsign(x477);
j7eval[2]=((IKabs((((new_r11*x479))+((x476*x478)))))+(IKabs(((((-1.0)*x475*x478))+((new_r10*x479))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
CheckValue<IkReal> x482 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x482.valid){
continue;
}
IkReal x480=((-1.0)*(x482.value));
IkReal x481=x468;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst7;
cj9=gconst8;
j9=x480;
IkReal gconst6=x480;
IkReal gconst7=((-1.0)*new_r01*x481);
IkReal gconst8=(new_r11*x481);
IkReal x483=((new_r01*new_r01)+(new_r11*new_r11));
j7eval[0]=x483;
j7eval[1]=IKsign(x483);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x486 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x486.valid){
continue;
}
IkReal x484=((-1.0)*(x486.value));
IkReal x485=x468;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst7;
cj9=gconst8;
j9=x484;
IkReal gconst6=x484;
IkReal gconst7=((-1.0)*new_r01*x485);
IkReal gconst8=(new_r11*x485);
IkReal x487=new_r01*new_r01;
IkReal x488=new_r11*new_r11;
IkReal x489=((1.0)*x487);
CheckValue<IkReal> x495=IKPowWithIntegerCheck((x488+x487),-1);
if(!x495.valid){
continue;
}
IkReal x490=x495.value;
CheckValue<IkReal> x496=IKPowWithIntegerCheck(((((-1.0)*x489))+(((-1.0)*x488))),-1);
if(!x496.valid){
continue;
}
IkReal x491=x496.value;
IkReal x492=((1.0)*x491);
IkReal x493=(new_r11*x492);
IkReal x494=(new_r01*x492);
j7eval[0]=((IKabs(((((-1.0)*x493*(new_r01*new_r01*new_r01)))+(((-1.0)*new_r01*x493))+(((-1.0)*new_r01*x493*(new_r11*new_r11))))))+(IKabs(((((-1.0)*x489*x490))+((x490*(x488*x488)))+((x487*x488*x490))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x498 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x498.valid){
continue;
}
IkReal x497=((-1.0)*(x498.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst7;
cj9=gconst8;
j9=x497;
new_r11=0;
new_r00=0;
IkReal gconst6=x497;
IkReal x499 = new_r01*new_r01;
if(IKabs(x499)==0){
continue;
}
IkReal gconst7=((-1.0)*new_r01*(pow(x499,-0.5)));
IkReal gconst8=0;
j7eval[0]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x500=IKPowWithIntegerCheck(gconst7,-1);
if(!x500.valid){
continue;
}
cj7array[0]=((-1.0)*new_r10*(x500.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x501=IKsin(j7);
IkReal x502=IKcos(j7);
IkReal x503=((-1.0)*x501);
evalcond[0]=(new_r10*x501);
evalcond[1]=(new_r01*x503);
evalcond[2]=(gconst7*x503);
evalcond[3]=(gconst7+((new_r10*x502)));
evalcond[4]=(gconst7+((new_r01*x502)));
evalcond[5]=(((gconst7*x502))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x504=IKPowWithIntegerCheck(new_r10,-1);
if(!x504.valid){
continue;
}
cj7array[0]=((-1.0)*gconst7*(x504.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x505=IKsin(j7);
IkReal x506=IKcos(j7);
IkReal x507=(gconst7*x506);
IkReal x508=((-1.0)*x505);
evalcond[0]=(new_r10*x505);
evalcond[1]=(new_r01*x508);
evalcond[2]=(gconst7*x508);
evalcond[3]=(x507+new_r10);
evalcond[4]=(gconst7+((new_r01*x506)));
evalcond[5]=(x507+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst7;
evalcond[2]=gconst8;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
CheckValue<IkReal> x510 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x510.valid){
continue;
}
IkReal x509=((-1.0)*(x510.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst7;
cj9=gconst8;
j9=x509;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst6=x509;
IkReal gconst7=((-1.0)*new_r01);
IkReal gconst8=new_r11;
j7eval[0]=-1.0;
j7eval[1]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
j7eval[2]=-1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x512 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x512.valid){
continue;
}
IkReal x511=((-1.0)*(x512.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst7;
cj9=gconst8;
j9=x511;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst6=x511;
IkReal gconst7=((-1.0)*new_r01);
IkReal gconst8=new_r11;
j7eval[0]=-1.0;
j7eval[1]=((IKabs((new_r01*new_r11)))+(IKabs(((1.0)+(((-1.0)*(new_r01*new_r01)))))));
j7eval[2]=-1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x514 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x514.valid){
continue;
}
IkReal x513=((-1.0)*(x514.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst7;
cj9=gconst8;
j9=x513;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst6=x513;
IkReal gconst7=((-1.0)*new_r01);
IkReal gconst8=new_r11;
j7eval[0]=1.0;
j7eval[1]=((((0.5)*(IKabs(((-1.0)+(((2.0)*(new_r01*new_r01))))))))+(IKabs((new_r01*new_r11))));
j7eval[2]=1.0;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x515=((1.0)*new_r11);
CheckValue<IkReal> x516 = IKatan2WithCheck(IkReal((((gconst8*new_r01))+(((-1.0)*gconst7*x515)))),IkReal(((((-1.0)*gconst7*new_r01))+(((-1.0)*gconst8*x515)))),IKFAST_ATAN2_MAGTHRESH);
if(!x516.valid){
continue;
}
CheckValue<IkReal> x517=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x517.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x516.value)+(((1.5707963267949)*(x517.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x518=IKcos(j7);
IkReal x519=IKsin(j7);
IkReal x520=(gconst7*x518);
IkReal x521=((1.0)*x519);
IkReal x522=(gconst8*x518);
IkReal x523=(gconst8*x521);
evalcond[0]=((((-1.0)*x523))+x520);
evalcond[1]=(((new_r01*x518))+((new_r11*x519))+gconst7);
evalcond[2]=(((gconst7*x519))+x522+new_r11);
evalcond[3]=(((new_r11*x518))+gconst8+(((-1.0)*new_r01*x521)));
evalcond[4]=((((-1.0)*x522))+(((-1.0)*gconst7*x521)));
evalcond[5]=((((-1.0)*x523))+x520+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x524 = IKatan2WithCheck(IkReal((gconst7*new_r11)),IkReal((gconst8*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x524.valid){
continue;
}
CheckValue<IkReal> x525=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst8*gconst8)))+(((-1.0)*(gconst7*gconst7))))),-1);
if(!x525.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x524.value)+(((1.5707963267949)*(x525.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x526=IKcos(j7);
IkReal x527=IKsin(j7);
IkReal x528=(gconst7*x526);
IkReal x529=((1.0)*x527);
IkReal x530=(gconst8*x526);
IkReal x531=(gconst8*x529);
evalcond[0]=((((-1.0)*x531))+x528);
evalcond[1]=(((new_r01*x526))+gconst7+((new_r11*x527)));
evalcond[2]=(((gconst7*x527))+x530+new_r11);
evalcond[3]=(gconst8+((new_r11*x526))+(((-1.0)*new_r01*x529)));
evalcond[4]=((((-1.0)*x530))+(((-1.0)*gconst7*x529)));
evalcond[5]=((((-1.0)*x531))+x528+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x532 = IKatan2WithCheck(IkReal((gconst7*gconst8)),IkReal(gconst8*gconst8),IKFAST_ATAN2_MAGTHRESH);
if(!x532.valid){
continue;
}
CheckValue<IkReal> x533=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst8*new_r11))+((gconst7*new_r01)))),-1);
if(!x533.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x532.value)+(((1.5707963267949)*(x533.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x534=IKcos(j7);
IkReal x535=IKsin(j7);
IkReal x536=(gconst7*x534);
IkReal x537=((1.0)*x535);
IkReal x538=(gconst8*x534);
IkReal x539=(gconst8*x537);
evalcond[0]=((((-1.0)*x539))+x536);
evalcond[1]=(((new_r01*x534))+gconst7+((new_r11*x535)));
evalcond[2]=(((gconst7*x535))+x538+new_r11);
evalcond[3]=(gconst8+((new_r11*x534))+(((-1.0)*new_r01*x537)));
evalcond[4]=((((-1.0)*x538))+(((-1.0)*gconst7*x537)));
evalcond[5]=((((-1.0)*x539))+x536+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x540=IKPowWithIntegerCheck(gconst8,-1);
if(!x540.valid){
continue;
}
cj7array[0]=(new_r00*(x540.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x541=IKsin(j7);
IkReal x542=IKcos(j7);
IkReal x543=((-1.0)*x541);
evalcond[0]=(new_r11*x541);
evalcond[1]=(new_r00*x543);
evalcond[2]=(gconst8*x543);
evalcond[3]=(gconst8+((new_r11*x542)));
evalcond[4]=(((gconst8*x542))+new_r11);
evalcond[5]=(((new_r00*x542))+(((-1.0)*gconst8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x545 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x545.valid){
continue;
}
IkReal x544=((-1.0)*(x545.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst7;
cj9=gconst8;
j9=x544;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst6=x544;
IkReal gconst7=0;
IkReal x546 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x546)==0){
continue;
}
IkReal gconst8=(new_r11*(pow(x546,-0.5)));
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x548 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x548.valid){
continue;
}
IkReal x547=((-1.0)*(x548.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst7;
cj9=gconst8;
j9=x547;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst6=x547;
IkReal gconst7=0;
IkReal x549 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x549)==0){
continue;
}
IkReal gconst8=(new_r11*(pow(x549,-0.5)));
j7eval[0]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
CheckValue<IkReal> x551 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x551.valid){
continue;
}
IkReal x550=((-1.0)*(x551.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst7;
cj9=gconst8;
j9=x550;
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst6=x550;
IkReal gconst7=0;
IkReal x552 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x552)==0){
continue;
}
IkReal gconst8=(new_r11*(pow(x552,-0.5)));
j7eval[0]=new_r10;
j7eval[1]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x553=IKPowWithIntegerCheck(new_r10,-1);
if(!x553.valid){
continue;
}
CheckValue<IkReal> x554=IKPowWithIntegerCheck(new_r11,-1);
if(!x554.valid){
continue;
}
if( IKabs((gconst8*(x553.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst8*(x554.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst8*(x553.value)))+IKsqr(((-1.0)*gconst8*(x554.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((gconst8*(x553.value)), ((-1.0)*gconst8*(x554.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x555=IKcos(j7);
IkReal x556=IKsin(j7);
IkReal x557=(gconst8*x556);
IkReal x558=(gconst8*x555);
evalcond[0]=(new_r10*x555);
evalcond[1]=(new_r11*x556);
evalcond[2]=((-1.0)*x558);
evalcond[3]=((-1.0)*x557);
evalcond[4]=(((new_r11*x555))+gconst8);
evalcond[5]=(x558+new_r11);
evalcond[6]=((((-1.0)*x557))+new_r10);
evalcond[7]=(((new_r10*x556))+(((-1.0)*gconst8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x559=IKPowWithIntegerCheck(gconst8,-1);
if(!x559.valid){
continue;
}
CheckValue<IkReal> x560=IKPowWithIntegerCheck(new_r11,-1);
if(!x560.valid){
continue;
}
if( IKabs((new_r10*(x559.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst8*(x560.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x559.value)))+IKsqr(((-1.0)*gconst8*(x560.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r10*(x559.value)), ((-1.0)*gconst8*(x560.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x561=IKcos(j7);
IkReal x562=IKsin(j7);
IkReal x563=(gconst8*x562);
IkReal x564=(gconst8*x561);
evalcond[0]=(new_r10*x561);
evalcond[1]=(new_r11*x562);
evalcond[2]=((-1.0)*x564);
evalcond[3]=((-1.0)*x563);
evalcond[4]=(gconst8+((new_r11*x561)));
evalcond[5]=(x564+new_r11);
evalcond[6]=((((-1.0)*x563))+new_r10);
evalcond[7]=((((-1.0)*gconst8))+((new_r10*x562)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x565 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x565.valid){
continue;
}
CheckValue<IkReal> x566=IKPowWithIntegerCheck(IKsign(gconst8),-1);
if(!x566.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x565.value)+(((1.5707963267949)*(x566.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x567=IKcos(j7);
IkReal x568=IKsin(j7);
IkReal x569=(gconst8*x568);
IkReal x570=(gconst8*x567);
evalcond[0]=(new_r10*x567);
evalcond[1]=(new_r11*x568);
evalcond[2]=((-1.0)*x570);
evalcond[3]=((-1.0)*x569);
evalcond[4]=(gconst8+((new_r11*x567)));
evalcond[5]=(x570+new_r11);
evalcond[6]=((((-1.0)*x569))+new_r10);
evalcond[7]=((((-1.0)*gconst8))+((new_r10*x568)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x572 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x572.valid){
continue;
}
IkReal x571=((-1.0)*(x572.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst7;
cj9=gconst8;
j9=x571;
new_r01=0;
IkReal gconst6=x571;
IkReal gconst7=0;
IkReal x573 = new_r11*new_r11;
if(IKabs(x573)==0){
continue;
}
IkReal gconst8=(new_r11*(pow(x573,-0.5)));
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x575 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x575.valid){
continue;
}
IkReal x574=((-1.0)*(x575.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst7;
cj9=gconst8;
j9=x574;
new_r01=0;
IkReal gconst6=x574;
IkReal gconst7=0;
IkReal x576 = new_r11*new_r11;
if(IKabs(x576)==0){
continue;
}
IkReal gconst8=(new_r11*(pow(x576,-0.5)));
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x578 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x578.valid){
continue;
}
IkReal x577=((-1.0)*(x578.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst7;
cj9=gconst8;
j9=x577;
new_r01=0;
IkReal gconst6=x577;
IkReal gconst7=0;
IkReal x579 = new_r11*new_r11;
if(IKabs(x579)==0){
continue;
}
IkReal gconst8=(new_r11*(pow(x579,-0.5)));
j7eval[0]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x580=IKPowWithIntegerCheck(gconst8,-1);
if(!x580.valid){
continue;
}
CheckValue<IkReal> x581=IKPowWithIntegerCheck(new_r11,-1);
if(!x581.valid){
continue;
}
if( IKabs((new_r10*(x580.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst8*(x581.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x580.value)))+IKsqr(((-1.0)*gconst8*(x581.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r10*(x580.value)), ((-1.0)*gconst8*(x581.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x582=IKsin(j7);
IkReal x583=IKcos(j7);
IkReal x584=(gconst8*x582);
IkReal x585=(gconst8*x583);
evalcond[0]=(new_r11*x582);
evalcond[1]=((-1.0)*x584);
evalcond[2]=(gconst8+((new_r11*x583)));
evalcond[3]=(x585+new_r11);
evalcond[4]=((((-1.0)*x584))+new_r10);
evalcond[5]=((((-1.0)*x585))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x582))+((new_r10*x583)));
evalcond[7]=((((-1.0)*gconst8))+((new_r00*x583))+((new_r10*x582)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x586 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x586.valid){
continue;
}
CheckValue<IkReal> x587=IKPowWithIntegerCheck(IKsign(gconst8),-1);
if(!x587.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x586.value)+(((1.5707963267949)*(x587.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x588=IKsin(j7);
IkReal x589=IKcos(j7);
IkReal x590=(gconst8*x588);
IkReal x591=(gconst8*x589);
evalcond[0]=(new_r11*x588);
evalcond[1]=((-1.0)*x590);
evalcond[2]=(gconst8+((new_r11*x589)));
evalcond[3]=(x591+new_r11);
evalcond[4]=((((-1.0)*x590))+new_r10);
evalcond[5]=((((-1.0)*x591))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x588))+((new_r10*x589)));
evalcond[7]=((((-1.0)*gconst8))+((new_r00*x589))+((new_r10*x588)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x592=IKPowWithIntegerCheck(IKsign(gconst8),-1);
if(!x592.valid){
continue;
}
CheckValue<IkReal> x593 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x593.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x592.value)))+(x593.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x594=IKsin(j7);
IkReal x595=IKcos(j7);
IkReal x596=(gconst8*x594);
IkReal x597=(gconst8*x595);
evalcond[0]=(new_r11*x594);
evalcond[1]=((-1.0)*x596);
evalcond[2]=(((new_r11*x595))+gconst8);
evalcond[3]=(x597+new_r11);
evalcond[4]=((((-1.0)*x596))+new_r10);
evalcond[5]=((((-1.0)*x597))+new_r00);
evalcond[6]=(((new_r10*x595))+(((-1.0)*new_r00*x594)));
evalcond[7]=(((new_r10*x594))+((new_r00*x595))+(((-1.0)*gconst8)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x598=((1.0)*new_r11);
CheckValue<IkReal> x599 = IKatan2WithCheck(IkReal(((((-1.0)*new_r01*x598))+((gconst7*gconst8)))),IkReal(((((-1.0)*(gconst7*gconst7)))+(new_r11*new_r11))),IKFAST_ATAN2_MAGTHRESH);
if(!x599.valid){
continue;
}
CheckValue<IkReal> x600=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst8*x598))+((gconst7*new_r01)))),-1);
if(!x600.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x599.value)+(((1.5707963267949)*(x600.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x601=IKcos(j7);
IkReal x602=IKsin(j7);
IkReal x603=(gconst7*x601);
IkReal x604=((1.0)*x602);
IkReal x605=(gconst8*x601);
IkReal x606=(gconst8*x604);
evalcond[0]=(gconst7+((new_r11*x602))+((new_r01*x601)));
evalcond[1]=(((gconst7*x602))+x605+new_r11);
evalcond[2]=(gconst7+((new_r10*x601))+(((-1.0)*new_r00*x604)));
evalcond[3]=(gconst8+((new_r11*x601))+(((-1.0)*new_r01*x604)));
evalcond[4]=(x603+(((-1.0)*x606))+new_r10);
evalcond[5]=(x603+(((-1.0)*x606))+new_r01);
evalcond[6]=((((-1.0)*gconst8))+((new_r10*x602))+((new_r00*x601)));
evalcond[7]=((((-1.0)*x605))+new_r00+(((-1.0)*gconst7*x604)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x607=((1.0)*new_r11);
CheckValue<IkReal> x608=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x608.valid){
continue;
}
CheckValue<IkReal> x609 = IKatan2WithCheck(IkReal((((gconst8*new_r01))+(((-1.0)*gconst7*x607)))),IkReal(((((-1.0)*gconst7*new_r01))+(((-1.0)*gconst8*x607)))),IKFAST_ATAN2_MAGTHRESH);
if(!x609.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x608.value)))+(x609.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x610=IKcos(j7);
IkReal x611=IKsin(j7);
IkReal x612=(gconst7*x610);
IkReal x613=((1.0)*x611);
IkReal x614=(gconst8*x610);
IkReal x615=(gconst8*x613);
evalcond[0]=(gconst7+((new_r11*x611))+((new_r01*x610)));
evalcond[1]=(((gconst7*x611))+x614+new_r11);
evalcond[2]=(gconst7+((new_r10*x610))+(((-1.0)*new_r00*x613)));
evalcond[3]=(gconst8+((new_r11*x610))+(((-1.0)*new_r01*x613)));
evalcond[4]=((((-1.0)*x615))+x612+new_r10);
evalcond[5]=((((-1.0)*x615))+x612+new_r01);
evalcond[6]=((((-1.0)*gconst8))+((new_r10*x611))+((new_r00*x610)));
evalcond[7]=((((-1.0)*x614))+new_r00+(((-1.0)*gconst7*x613)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x616=((1.0)*gconst7);
CheckValue<IkReal> x617 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x616))+((gconst7*new_r01)))),IkReal(((((-1.0)*new_r11*x616))+(((-1.0)*new_r00*x616)))),IKFAST_ATAN2_MAGTHRESH);
if(!x617.valid){
continue;
}
CheckValue<IkReal> x618=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x618.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x617.value)+(((1.5707963267949)*(x618.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x619=IKcos(j7);
IkReal x620=IKsin(j7);
IkReal x621=(gconst7*x619);
IkReal x622=((1.0)*x620);
IkReal x623=(gconst8*x619);
IkReal x624=(gconst8*x622);
evalcond[0]=(gconst7+((new_r11*x620))+((new_r01*x619)));
evalcond[1]=(x623+new_r11+((gconst7*x620)));
evalcond[2]=((((-1.0)*new_r00*x622))+gconst7+((new_r10*x619)));
evalcond[3]=((((-1.0)*new_r01*x622))+gconst8+((new_r11*x619)));
evalcond[4]=((((-1.0)*x624))+x621+new_r10);
evalcond[5]=((((-1.0)*x624))+x621+new_r01);
evalcond[6]=((((-1.0)*gconst8))+((new_r10*x620))+((new_r00*x619)));
evalcond[7]=((((-1.0)*gconst7*x622))+(((-1.0)*x623))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
IkReal x626 = ((new_r01*new_r01)+(new_r11*new_r11));
if(IKabs(x626)==0){
continue;
}
IkReal x625=pow(x626,-0.5);
CheckValue<IkReal> x627 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x627.valid){
continue;
}
IkReal gconst9=((3.14159265358979)+(((-1.0)*(x627.value))));
IkReal gconst10=((1.0)*new_r01*x625);
IkReal gconst11=((-1.0)*new_r11*x625);
CheckValue<IkReal> x628 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x628.valid){
continue;
}
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+(x628.value)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
CheckValue<IkReal> x631 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x631.valid){
continue;
}
IkReal x629=((1.0)*(x631.value));
IkReal x630=x625;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x629)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x629)));
IkReal gconst10=((1.0)*new_r01*x630);
IkReal gconst11=((-1.0)*new_r11*x630);
IkReal x632=new_r01*new_r01;
IkReal x633=(((new_r10*new_r11))+((new_r00*new_r01)));
IkReal x634=x625;
IkReal x635=((1.0)*new_r01*x634);
j7eval[0]=x633;
j7eval[1]=((IKabs((((x632*x634))+(((-1.0)*new_r10*x635)))))+(IKabs(((((-1.0)*new_r00*x635))+(((-1.0)*new_r11*x635))))));
j7eval[2]=IKsign(x633);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
CheckValue<IkReal> x638 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x638.valid){
continue;
}
IkReal x636=((1.0)*(x638.value));
IkReal x637=x625;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x636)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x636)));
IkReal gconst10=((1.0)*new_r01*x637);
IkReal gconst11=((-1.0)*new_r11*x637);
IkReal x639=((new_r01*new_r01)+(new_r11*new_r11));
j7eval[0]=x639;
j7eval[1]=IKsign(x639);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x642 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x642.valid){
continue;
}
IkReal x640=((1.0)*(x642.value));
IkReal x641=x625;
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x640)));
IkReal gconst9=((3.14159265358979)+(((-1.0)*x640)));
IkReal gconst10=((1.0)*new_r01*x641);
IkReal gconst11=((-1.0)*new_r11*x641);
IkReal x643=new_r01*new_r01;
IkReal x644=new_r11*new_r11;
IkReal x645=((1.0)*x643);
CheckValue<IkReal> x651=IKPowWithIntegerCheck((x644+x643),-1);
if(!x651.valid){
continue;
}
IkReal x646=x651.value;
CheckValue<IkReal> x652=IKPowWithIntegerCheck(((((-1.0)*x644))+(((-1.0)*x645))),-1);
if(!x652.valid){
continue;
}
IkReal x647=x652.value;
IkReal x648=((1.0)*x647);
IkReal x649=(new_r11*x648);
IkReal x650=(new_r01*x648);
j7eval[0]=((IKabs(((((-1.0)*x649*(new_r01*new_r01*new_r01)))+(((-1.0)*new_r01*x649*(new_r11*new_r11)))+(((-1.0)*new_r01*x649)))))+(IKabs((((x643*x644*x646))+((x646*(x644*x644)))+(((-1.0)*x645*x646))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal evalcond[3];
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x654 = IKatan2WithCheck(IkReal(new_r01),IkReal(0),IKFAST_ATAN2_MAGTHRESH);
if(!x654.valid){
continue;
}
IkReal x653=((1.0)*(x654.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x653)));
new_r11=0;
new_r00=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x653)));
IkReal x655 = new_r01*new_r01;
if(IKabs(x655)==0){
continue;
}
IkReal gconst10=((1.0)*new_r01*(pow(x655,-0.5)));
IkReal gconst11=0;
j7eval[0]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x656=IKPowWithIntegerCheck(gconst10,-1);
if(!x656.valid){
continue;
}
cj7array[0]=((-1.0)*new_r10*(x656.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x657=IKsin(j7);
IkReal x658=IKcos(j7);
IkReal x659=((-1.0)*x657);
evalcond[0]=(new_r10*x657);
evalcond[1]=(new_r01*x659);
evalcond[2]=(gconst10*x659);
evalcond[3]=(gconst10+((new_r10*x658)));
evalcond[4]=(gconst10+((new_r01*x658)));
evalcond[5]=(((gconst10*x658))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x660=IKPowWithIntegerCheck(new_r10,-1);
if(!x660.valid){
continue;
}
cj7array[0]=((-1.0)*gconst10*(x660.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x661=IKsin(j7);
IkReal x662=IKcos(j7);
IkReal x663=(gconst10*x662);
IkReal x664=((-1.0)*x661);
evalcond[0]=(new_r10*x661);
evalcond[1]=(new_r01*x664);
evalcond[2]=(gconst10*x664);
evalcond[3]=(x663+new_r10);
evalcond[4]=(gconst10+((new_r01*x662)));
evalcond[5]=(x663+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
evalcond[1]=gconst10;
evalcond[2]=gconst11;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
CheckValue<IkReal> x666 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x666.valid){
continue;
}
IkReal x665=((1.0)*(x666.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x665)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x665)));
IkReal gconst10=((1.0)*new_r01);
IkReal gconst11=((-1.0)*new_r11);
j7eval[0]=1.0;
j7eval[1]=1.0;
j7eval[2]=((IKabs(((1.0)+(((-1.0)*(new_r01*new_r01))))))+(IKabs(((1.0)*new_r01*new_r11))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x668 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x668.valid){
continue;
}
IkReal x667=((1.0)*(x668.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x667)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x667)));
IkReal gconst10=((1.0)*new_r01);
IkReal gconst11=((-1.0)*new_r11);
j7eval[0]=-1.0;
j7eval[1]=-1.0;
j7eval[2]=((IKabs(((-1.0)+(new_r01*new_r01))))+(IKabs(((1.0)*new_r01*new_r11))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
CheckValue<IkReal> x670 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x670.valid){
continue;
}
IkReal x669=((1.0)*(x670.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x669)));
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x669)));
IkReal gconst10=((1.0)*new_r01);
IkReal gconst11=((-1.0)*new_r11);
j7eval[0]=1.0;
j7eval[1]=1.0;
j7eval[2]=((IKabs(((2.0)*new_r01*new_r11)))+(IKabs(((1.0)+(((-2.0)*(new_r01*new_r01)))))));
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x671=((1.0)*new_r11);
CheckValue<IkReal> x672=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x672.valid){
continue;
}
CheckValue<IkReal> x673 = IKatan2WithCheck(IkReal((((gconst11*new_r01))+(((-1.0)*gconst10*x671)))),IkReal(((((-1.0)*gconst11*x671))+(((-1.0)*gconst10*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x673.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x672.value)))+(x673.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x674=IKcos(j7);
IkReal x675=IKsin(j7);
IkReal x676=(gconst10*x674);
IkReal x677=((1.0)*x675);
IkReal x678=(gconst11*x674);
IkReal x679=(gconst11*x677);
evalcond[0]=(x676+(((-1.0)*x679)));
evalcond[1]=(((new_r11*x675))+((new_r01*x674))+gconst10);
evalcond[2]=(((gconst10*x675))+x678+new_r11);
evalcond[3]=(((new_r11*x674))+(((-1.0)*new_r01*x677))+gconst11);
evalcond[4]=((((-1.0)*x678))+(((-1.0)*gconst10*x677)));
evalcond[5]=(x676+new_r01+(((-1.0)*x679)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x680=IKPowWithIntegerCheck(IKsign(((((-1.0)*(gconst11*gconst11)))+(((-1.0)*(gconst10*gconst10))))),-1);
if(!x680.valid){
continue;
}
CheckValue<IkReal> x681 = IKatan2WithCheck(IkReal((gconst10*new_r11)),IkReal((gconst11*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x681.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x680.value)))+(x681.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x682=IKcos(j7);
IkReal x683=IKsin(j7);
IkReal x684=(gconst10*x682);
IkReal x685=((1.0)*x683);
IkReal x686=(gconst11*x682);
IkReal x687=(gconst11*x685);
evalcond[0]=((((-1.0)*x687))+x684);
evalcond[1]=(gconst10+((new_r01*x682))+((new_r11*x683)));
evalcond[2]=(((gconst10*x683))+x686+new_r11);
evalcond[3]=((((-1.0)*new_r01*x685))+gconst11+((new_r11*x682)));
evalcond[4]=((((-1.0)*gconst10*x685))+(((-1.0)*x686)));
evalcond[5]=((((-1.0)*x687))+x684+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x688=IKPowWithIntegerCheck(IKsign((((gconst10*new_r01))+(((-1.0)*gconst11*new_r11)))),-1);
if(!x688.valid){
continue;
}
CheckValue<IkReal> x689 = IKatan2WithCheck(IkReal((gconst10*gconst11)),IkReal(gconst11*gconst11),IKFAST_ATAN2_MAGTHRESH);
if(!x689.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x688.value)))+(x689.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x690=IKcos(j7);
IkReal x691=IKsin(j7);
IkReal x692=(gconst10*x690);
IkReal x693=((1.0)*x691);
IkReal x694=(gconst11*x690);
IkReal x695=(gconst11*x693);
evalcond[0]=(x692+(((-1.0)*x695)));
evalcond[1]=(gconst10+((new_r11*x691))+((new_r01*x690)));
evalcond[2]=(((gconst10*x691))+x694+new_r11);
evalcond[3]=((((-1.0)*new_r01*x693))+gconst11+((new_r11*x690)));
evalcond[4]=((((-1.0)*gconst10*x693))+(((-1.0)*x694)));
evalcond[5]=(x692+(((-1.0)*x695))+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x696=IKPowWithIntegerCheck(gconst11,-1);
if(!x696.valid){
continue;
}
cj7array[0]=(new_r00*(x696.value));
if( cj7array[0] >= -1-IKFAST_SINCOS_THRESH && cj7array[0] <= 1+IKFAST_SINCOS_THRESH )
{
    j7valid[0] = j7valid[1] = true;
    j7array[0] = IKacos(cj7array[0]);
    sj7array[0] = IKsin(j7array[0]);
    cj7array[1] = cj7array[0];
    j7array[1] = -j7array[0];
    sj7array[1] = -sj7array[0];
}
else if( isnan(cj7array[0]) )
{
    // probably any value will work
    j7valid[0] = true;
    cj7array[0] = 1; sj7array[0] = 0; j7array[0] = 0;
}
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[6];
IkReal x697=IKsin(j7);
IkReal x698=IKcos(j7);
IkReal x699=((-1.0)*x697);
evalcond[0]=(new_r11*x697);
evalcond[1]=(new_r00*x699);
evalcond[2]=(gconst11*x699);
evalcond[3]=(gconst11+((new_r11*x698)));
evalcond[4]=(((gconst11*x698))+new_r11);
evalcond[5]=(((new_r00*x698))+(((-1.0)*gconst11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r00))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x701 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x701.valid){
continue;
}
IkReal x700=((1.0)*(x701.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x700)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x700)));
IkReal gconst10=0;
IkReal x702 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x702)==0){
continue;
}
IkReal gconst11=((-1.0)*new_r11*(pow(x702,-0.5)));
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x704 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x704.valid){
continue;
}
IkReal x703=((1.0)*(x704.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x703)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x703)));
IkReal gconst10=0;
IkReal x705 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x705)==0){
continue;
}
IkReal gconst11=((-1.0)*new_r11*(pow(x705,-0.5)));
j7eval[0]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
CheckValue<IkReal> x707 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x707.valid){
continue;
}
IkReal x706=((1.0)*(x707.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x706)));
new_r00=0;
new_r01=0;
new_r12=0;
new_r22=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x706)));
IkReal gconst10=0;
IkReal x708 = ((1.0)+(((-1.0)*(new_r10*new_r10))));
if(IKabs(x708)==0){
continue;
}
IkReal gconst11=((-1.0)*new_r11*(pow(x708,-0.5)));
j7eval[0]=new_r10;
j7eval[1]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x709=IKPowWithIntegerCheck(new_r10,-1);
if(!x709.valid){
continue;
}
CheckValue<IkReal> x710=IKPowWithIntegerCheck(new_r11,-1);
if(!x710.valid){
continue;
}
if( IKabs((gconst11*(x709.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst11*(x710.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((gconst11*(x709.value)))+IKsqr(((-1.0)*gconst11*(x710.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((gconst11*(x709.value)), ((-1.0)*gconst11*(x710.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x711=IKcos(j7);
IkReal x712=IKsin(j7);
IkReal x713=(gconst11*x712);
IkReal x714=(gconst11*x711);
evalcond[0]=(new_r10*x711);
evalcond[1]=(new_r11*x712);
evalcond[2]=((-1.0)*x714);
evalcond[3]=((-1.0)*x713);
evalcond[4]=(gconst11+((new_r11*x711)));
evalcond[5]=(x714+new_r11);
evalcond[6]=((((-1.0)*x713))+new_r10);
evalcond[7]=((((-1.0)*gconst11))+((new_r10*x712)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x715=IKPowWithIntegerCheck(gconst11,-1);
if(!x715.valid){
continue;
}
CheckValue<IkReal> x716=IKPowWithIntegerCheck(new_r11,-1);
if(!x716.valid){
continue;
}
if( IKabs((new_r10*(x715.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst11*(x716.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x715.value)))+IKsqr(((-1.0)*gconst11*(x716.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r10*(x715.value)), ((-1.0)*gconst11*(x716.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x717=IKcos(j7);
IkReal x718=IKsin(j7);
IkReal x719=(gconst11*x718);
IkReal x720=(gconst11*x717);
evalcond[0]=(new_r10*x717);
evalcond[1]=(new_r11*x718);
evalcond[2]=((-1.0)*x720);
evalcond[3]=((-1.0)*x719);
evalcond[4]=(gconst11+((new_r11*x717)));
evalcond[5]=(x720+new_r11);
evalcond[6]=((((-1.0)*x719))+new_r10);
evalcond[7]=((((-1.0)*gconst11))+((new_r10*x718)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x721=IKPowWithIntegerCheck(IKsign(gconst11),-1);
if(!x721.valid){
continue;
}
CheckValue<IkReal> x722 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x722.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x721.value)))+(x722.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x723=IKcos(j7);
IkReal x724=IKsin(j7);
IkReal x725=(gconst11*x724);
IkReal x726=(gconst11*x723);
evalcond[0]=(new_r10*x723);
evalcond[1]=(new_r11*x724);
evalcond[2]=((-1.0)*x726);
evalcond[3]=((-1.0)*x725);
evalcond[4]=(gconst11+((new_r11*x723)));
evalcond[5]=(x726+new_r11);
evalcond[6]=((((-1.0)*x725))+new_r10);
evalcond[7]=((((-1.0)*gconst11))+((new_r10*x724)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=IKabs(new_r01);
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
CheckValue<IkReal> x728 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x728.valid){
continue;
}
IkReal x727=((1.0)*(x728.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x727)));
new_r01=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x727)));
IkReal gconst10=0;
IkReal x729 = new_r11*new_r11;
if(IKabs(x729)==0){
continue;
}
IkReal gconst11=((-1.0)*new_r11*(pow(x729,-0.5)));
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x731 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x731.valid){
continue;
}
IkReal x730=((1.0)*(x731.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x730)));
new_r01=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x730)));
IkReal gconst10=0;
IkReal x732 = new_r11*new_r11;
if(IKabs(x732)==0){
continue;
}
IkReal gconst11=((-1.0)*new_r11*(pow(x732,-0.5)));
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r10)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
CheckValue<IkReal> x734 = IKatan2WithCheck(IkReal(0),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x734.valid){
continue;
}
IkReal x733=((1.0)*(x734.value));
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
sj9=gconst10;
cj9=gconst11;
j9=((3.14159265)+(((-1.0)*x733)));
new_r01=0;
IkReal gconst9=((3.14159265358979)+(((-1.0)*x733)));
IkReal gconst10=0;
IkReal x735 = new_r11*new_r11;
if(IKabs(x735)==0){
continue;
}
IkReal gconst11=((-1.0)*new_r11*(pow(x735,-0.5)));
j7eval[0]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x736=IKPowWithIntegerCheck(gconst11,-1);
if(!x736.valid){
continue;
}
CheckValue<IkReal> x737=IKPowWithIntegerCheck(new_r11,-1);
if(!x737.valid){
continue;
}
if( IKabs((new_r10*(x736.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*gconst11*(x737.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((new_r10*(x736.value)))+IKsqr(((-1.0)*gconst11*(x737.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((new_r10*(x736.value)), ((-1.0)*gconst11*(x737.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x738=IKsin(j7);
IkReal x739=IKcos(j7);
IkReal x740=((1.0)*x738);
IkReal x741=(gconst11*x739);
evalcond[0]=(new_r11*x738);
evalcond[1]=((-1.0)*gconst11*x738);
evalcond[2]=(gconst11+((new_r11*x739)));
evalcond[3]=(x741+new_r11);
evalcond[4]=((((-1.0)*gconst11*x740))+new_r10);
evalcond[5]=((((-1.0)*x741))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x740))+((new_r10*x739)));
evalcond[7]=(((new_r00*x739))+(((-1.0)*gconst11))+((new_r10*x738)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x742=IKPowWithIntegerCheck(IKsign(gconst11),-1);
if(!x742.valid){
continue;
}
CheckValue<IkReal> x743 = IKatan2WithCheck(IkReal(new_r10),IkReal(((-1.0)*new_r11)),IKFAST_ATAN2_MAGTHRESH);
if(!x743.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x742.value)))+(x743.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x744=IKsin(j7);
IkReal x745=IKcos(j7);
IkReal x746=((1.0)*x744);
IkReal x747=(gconst11*x745);
evalcond[0]=(new_r11*x744);
evalcond[1]=((-1.0)*gconst11*x744);
evalcond[2]=(gconst11+((new_r11*x745)));
evalcond[3]=(x747+new_r11);
evalcond[4]=((((-1.0)*gconst11*x746))+new_r10);
evalcond[5]=((((-1.0)*x747))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x746))+((new_r10*x745)));
evalcond[7]=(((new_r10*x744))+((new_r00*x745))+(((-1.0)*gconst11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x748=IKPowWithIntegerCheck(IKsign(gconst11),-1);
if(!x748.valid){
continue;
}
CheckValue<IkReal> x749 = IKatan2WithCheck(IkReal(new_r10),IkReal(new_r00),IKFAST_ATAN2_MAGTHRESH);
if(!x749.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x748.value)))+(x749.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x750=IKsin(j7);
IkReal x751=IKcos(j7);
IkReal x752=((1.0)*x750);
IkReal x753=(gconst11*x751);
evalcond[0]=(new_r11*x750);
evalcond[1]=((-1.0)*gconst11*x750);
evalcond[2]=(gconst11+((new_r11*x751)));
evalcond[3]=(x753+new_r11);
evalcond[4]=((((-1.0)*gconst11*x752))+new_r10);
evalcond[5]=((((-1.0)*x753))+new_r00);
evalcond[6]=((((-1.0)*new_r00*x752))+((new_r10*x751)));
evalcond[7]=(((new_r00*x751))+((new_r10*x750))+(((-1.0)*gconst11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x754=((1.0)*new_r11);
CheckValue<IkReal> x755 = IKatan2WithCheck(IkReal(((((-1.0)*new_r01*x754))+((gconst10*gconst11)))),IkReal(((new_r11*new_r11)+(((-1.0)*(gconst10*gconst10))))),IKFAST_ATAN2_MAGTHRESH);
if(!x755.valid){
continue;
}
CheckValue<IkReal> x756=IKPowWithIntegerCheck(IKsign(((((-1.0)*gconst11*x754))+((gconst10*new_r01)))),-1);
if(!x756.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x755.value)+(((1.5707963267949)*(x756.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x757=IKcos(j7);
IkReal x758=IKsin(j7);
IkReal x759=((1.0)*gconst11);
IkReal x760=(gconst10*x757);
IkReal x761=((1.0)*x758);
IkReal x762=(x758*x759);
evalcond[0]=(gconst10+((new_r11*x758))+((new_r01*x757)));
evalcond[1]=(((gconst10*x758))+((gconst11*x757))+new_r11);
evalcond[2]=((((-1.0)*new_r00*x761))+gconst10+((new_r10*x757)));
evalcond[3]=(gconst11+((new_r11*x757))+(((-1.0)*new_r01*x761)));
evalcond[4]=((((-1.0)*x762))+x760+new_r10);
evalcond[5]=((((-1.0)*x762))+x760+new_r01);
evalcond[6]=(((new_r00*x757))+((new_r10*x758))+(((-1.0)*x759)));
evalcond[7]=((((-1.0)*gconst10*x761))+new_r00+(((-1.0)*x757*x759)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x763=((1.0)*new_r11);
CheckValue<IkReal> x764 = IKatan2WithCheck(IkReal((((gconst11*new_r01))+(((-1.0)*gconst10*x763)))),IkReal(((((-1.0)*gconst11*x763))+(((-1.0)*gconst10*new_r01)))),IKFAST_ATAN2_MAGTHRESH);
if(!x764.valid){
continue;
}
CheckValue<IkReal> x765=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x765.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x764.value)+(((1.5707963267949)*(x765.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x766=IKcos(j7);
IkReal x767=IKsin(j7);
IkReal x768=((1.0)*gconst11);
IkReal x769=(gconst10*x766);
IkReal x770=((1.0)*x767);
IkReal x771=(x767*x768);
evalcond[0]=(((new_r11*x767))+gconst10+((new_r01*x766)));
evalcond[1]=(((gconst10*x767))+new_r11+((gconst11*x766)));
evalcond[2]=(((new_r10*x766))+(((-1.0)*new_r00*x770))+gconst10);
evalcond[3]=(((new_r11*x766))+(((-1.0)*new_r01*x770))+gconst11);
evalcond[4]=(x769+(((-1.0)*x771))+new_r10);
evalcond[5]=(x769+(((-1.0)*x771))+new_r01);
evalcond[6]=(((new_r10*x767))+(((-1.0)*x768))+((new_r00*x766)));
evalcond[7]=((((-1.0)*x766*x768))+(((-1.0)*gconst10*x770))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x772=((1.0)*gconst10);
CheckValue<IkReal> x773 = IKatan2WithCheck(IkReal(((((-1.0)*new_r10*x772))+((gconst10*new_r01)))),IkReal(((((-1.0)*new_r00*x772))+(((-1.0)*new_r11*x772)))),IKFAST_ATAN2_MAGTHRESH);
if(!x773.valid){
continue;
}
CheckValue<IkReal> x774=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x774.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x773.value)+(((1.5707963267949)*(x774.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x775=IKcos(j7);
IkReal x776=IKsin(j7);
IkReal x777=((1.0)*gconst11);
IkReal x778=(gconst10*x775);
IkReal x779=((1.0)*x776);
IkReal x780=(x776*x777);
evalcond[0]=(gconst10+((new_r11*x776))+((new_r01*x775)));
evalcond[1]=(((gconst11*x775))+new_r11+((gconst10*x776)));
evalcond[2]=((((-1.0)*new_r00*x779))+gconst10+((new_r10*x775)));
evalcond[3]=((((-1.0)*new_r01*x779))+gconst11+((new_r11*x775)));
evalcond[4]=((((-1.0)*x780))+x778+new_r10);
evalcond[5]=((((-1.0)*x780))+x778+new_r01);
evalcond[6]=(((new_r00*x775))+((new_r10*x776))+(((-1.0)*x777)));
evalcond[7]=((((-1.0)*x775*x777))+(((-1.0)*gconst10*x779))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((new_r01*new_r01)+(new_r11*new_r11));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
new_r01=0;
new_r11=0;
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // 3 cases reached

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x782 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x782.valid){
continue;
}
IkReal x781=x782.value;
j7array[0]=((-1.0)*x781);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x781)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=(((new_r10*(IKcos(j7))))+(((-1.0)*new_r00*(IKsin(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j9))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(new_r10, ((-1.0)*new_r11));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x783=IKcos(j7);
IkReal x784=IKsin(j7);
IkReal x785=((1.0)*x784);
evalcond[0]=(x783+new_r11);
evalcond[1]=((((-1.0)*x785))+new_r10);
evalcond[2]=((((-1.0)*x783))+new_r00);
evalcond[3]=((((-1.0)*x785))+new_r01);
evalcond[4]=(((new_r11*x784))+((new_r01*x783)));
evalcond[5]=(((new_r10*x783))+(((-1.0)*new_r00*x785)));
evalcond[6]=((-1.0)+((new_r10*x784))+((new_r00*x783)));
evalcond[7]=((1.0)+(((-1.0)*new_r01*x785))+((new_r11*x783)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j9)))), 6.28318530717959)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r00))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r00));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x786=IKsin(j7);
IkReal x787=IKcos(j7);
IkReal x788=((1.0)*x786);
evalcond[0]=(x786+new_r10);
evalcond[1]=(x787+new_r00);
evalcond[2]=(x786+new_r01);
evalcond[3]=((((-1.0)*x787))+new_r11);
evalcond[4]=(((new_r11*x786))+((new_r01*x787)));
evalcond[5]=(((new_r10*x787))+(((-1.0)*new_r00*x788)));
evalcond[6]=((1.0)+((new_r10*x786))+((new_r00*x787)));
evalcond[7]=((-1.0)+(((-1.0)*new_r01*x788))+((new_r11*x787)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
new_r11=0;
new_r00=0;
j7eval[0]=new_r01;
j7eval[1]=((IKabs(cj9))+(IKabs(sj9)));
j7eval[2]=IKsign(new_r01);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[3];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
new_r11=0;
new_r00=0;
j7eval[0]=new_r10;
j7eval[1]=((IKabs(cj9))+(IKabs(sj9)));
j7eval[2]=IKsign(new_r10);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
new_r11=0;
new_r00=0;
j7eval[0]=new_r01;
j7eval[1]=new_r10;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x789=IKPowWithIntegerCheck(new_r01,-1);
if(!x789.valid){
continue;
}
CheckValue<IkReal> x790=IKPowWithIntegerCheck(new_r10,-1);
if(!x790.valid){
continue;
}
if( IKabs((cj9*(x789.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*sj9*(x790.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((cj9*(x789.value)))+IKsqr(((-1.0)*sj9*(x790.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((cj9*(x789.value)), ((-1.0)*sj9*(x790.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[7];
IkReal x791=IKcos(j7);
IkReal x792=IKsin(j7);
IkReal x793=((1.0)*cj9);
IkReal x794=(sj9*x791);
IkReal x795=((1.0)*x792);
IkReal x796=(x792*x793);
evalcond[0]=(sj9+((new_r10*x791)));
evalcond[1]=(sj9+((new_r01*x791)));
evalcond[2]=((((-1.0)*new_r01*x795))+cj9);
evalcond[3]=((((-1.0)*x793))+((new_r10*x792)));
evalcond[4]=((((-1.0)*x796))+x794+new_r10);
evalcond[5]=((((-1.0)*sj9*x795))+(((-1.0)*x791*x793)));
evalcond[6]=((((-1.0)*x796))+x794+new_r01);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x797=IKPowWithIntegerCheck(IKsign(new_r10),-1);
if(!x797.valid){
continue;
}
CheckValue<IkReal> x798 = IKatan2WithCheck(IkReal(cj9),IkReal(((-1.0)*sj9)),IKFAST_ATAN2_MAGTHRESH);
if(!x798.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x797.value)))+(x798.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[7];
IkReal x799=IKcos(j7);
IkReal x800=IKsin(j7);
IkReal x801=((1.0)*cj9);
IkReal x802=(sj9*x799);
IkReal x803=((1.0)*x800);
IkReal x804=(x800*x801);
evalcond[0]=(sj9+((new_r10*x799)));
evalcond[1]=(sj9+((new_r01*x799)));
evalcond[2]=((((-1.0)*new_r01*x803))+cj9);
evalcond[3]=(((new_r10*x800))+(((-1.0)*x801)));
evalcond[4]=(new_r10+x802+(((-1.0)*x804)));
evalcond[5]=((((-1.0)*x799*x801))+(((-1.0)*sj9*x803)));
evalcond[6]=(new_r01+x802+(((-1.0)*x804)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x805=IKPowWithIntegerCheck(IKsign(new_r01),-1);
if(!x805.valid){
continue;
}
CheckValue<IkReal> x806 = IKatan2WithCheck(IkReal(cj9),IkReal(((-1.0)*sj9)),IKFAST_ATAN2_MAGTHRESH);
if(!x806.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x805.value)))+(x806.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[7];
IkReal x807=IKcos(j7);
IkReal x808=IKsin(j7);
IkReal x809=((1.0)*cj9);
IkReal x810=(sj9*x807);
IkReal x811=((1.0)*x808);
IkReal x812=(x808*x809);
evalcond[0]=(sj9+((new_r10*x807)));
evalcond[1]=(sj9+((new_r01*x807)));
evalcond[2]=(cj9+(((-1.0)*new_r01*x811)));
evalcond[3]=(((new_r10*x808))+(((-1.0)*x809)));
evalcond[4]=((((-1.0)*x812))+new_r10+x810);
evalcond[5]=((((-1.0)*x807*x809))+(((-1.0)*sj9*x811)));
evalcond[6]=((((-1.0)*x812))+new_r01+x810);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
new_r11=0;
new_r01=0;
new_r22=0;
new_r20=0;
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x814 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x814.valid){
continue;
}
IkReal x813=x814.value;
j7array[0]=((-1.0)*x813);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x813)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=(((new_r10*(IKcos(j7))))+(((-1.0)*new_r00*(IKsin(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
new_r00=0;
new_r10=0;
new_r21=0;
new_r22=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x816 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x816.valid){
continue;
}
IkReal x815=x816.value;
j7array[0]=((-1.0)*x815);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x815)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[1];
evalcond[0]=((((-1.0)*new_r01*(IKsin(j7))))+((new_r11*(IKcos(j7)))));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r10))+(IKabs(new_r01)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[3];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
new_r01=0;
new_r10=0;
j7eval[0]=new_r11;
j7eval[1]=((IKabs(cj9))+(IKabs(sj9)));
j7eval[2]=IKsign(new_r11);
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  || IKabs(j7eval[2]) < 0.0000010000000000  )
{
{
IkReal j7eval[2];
sj8=0;
cj8=-1.0;
j8=3.14159265358979;
new_r01=0;
new_r10=0;
j7eval[0]=new_r00;
j7eval[1]=new_r11;
if( IKabs(j7eval[0]) < 0.0000010000000000  || IKabs(j7eval[1]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x817=IKPowWithIntegerCheck(new_r00,-1);
if(!x817.valid){
continue;
}
CheckValue<IkReal> x818=IKPowWithIntegerCheck(new_r11,-1);
if(!x818.valid){
continue;
}
if( IKabs((sj9*(x817.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*cj9*(x818.value))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((sj9*(x817.value)))+IKsqr(((-1.0)*cj9*(x818.value)))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((sj9*(x817.value)), ((-1.0)*cj9*(x818.value)));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[7];
IkReal x819=IKsin(j7);
IkReal x820=IKcos(j7);
IkReal x821=(sj9*x819);
IkReal x822=(cj9*x820);
IkReal x823=((1.0)*x819);
evalcond[0]=(cj9+((new_r11*x820)));
evalcond[1]=(sj9+((new_r11*x819)));
evalcond[2]=(sj9+(((-1.0)*new_r00*x823)));
evalcond[3]=(((new_r00*x820))+(((-1.0)*cj9)));
evalcond[4]=(((sj9*x820))+(((-1.0)*cj9*x823)));
evalcond[5]=(new_r11+x822+x821);
evalcond[6]=((((-1.0)*x821))+(((-1.0)*x822))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x824=IKPowWithIntegerCheck(IKsign(new_r11),-1);
if(!x824.valid){
continue;
}
CheckValue<IkReal> x825 = IKatan2WithCheck(IkReal(((-1.0)*sj9)),IkReal(((-1.0)*cj9)),IKFAST_ATAN2_MAGTHRESH);
if(!x825.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x824.value)))+(x825.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[7];
IkReal x826=IKsin(j7);
IkReal x827=IKcos(j7);
IkReal x828=(sj9*x826);
IkReal x829=(cj9*x827);
IkReal x830=((1.0)*x826);
evalcond[0]=(cj9+((new_r11*x827)));
evalcond[1]=(sj9+((new_r11*x826)));
evalcond[2]=(sj9+(((-1.0)*new_r00*x830)));
evalcond[3]=(((new_r00*x827))+(((-1.0)*cj9)));
evalcond[4]=(((sj9*x827))+(((-1.0)*cj9*x830)));
evalcond[5]=(new_r11+x829+x828);
evalcond[6]=((((-1.0)*x828))+(((-1.0)*x829))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x831 = IKatan2WithCheck(IkReal(((-1.0)+((new_r01*new_r10))+(cj9*cj9))),IkReal(((((-1.0)*cj9*sj9))+(((-1.0)*new_r10*new_r11)))),IKFAST_ATAN2_MAGTHRESH);
if(!x831.valid){
continue;
}
CheckValue<IkReal> x832=IKPowWithIntegerCheck(IKsign((((new_r11*sj9))+((cj9*new_r01)))),-1);
if(!x832.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x831.value)+(((1.5707963267949)*(x832.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x833=IKsin(j7);
IkReal x834=IKcos(j7);
IkReal x835=(sj9*x834);
IkReal x836=(sj9*x833);
IkReal x837=(cj9*x834);
IkReal x838=((1.0)*x833);
IkReal x839=(cj9*x838);
evalcond[0]=(((new_r11*x833))+sj9+((new_r01*x834)));
evalcond[1]=(new_r11+x836+x837);
evalcond[2]=(sj9+(((-1.0)*new_r00*x838))+((new_r10*x834)));
evalcond[3]=(((new_r11*x834))+cj9+(((-1.0)*new_r01*x838)));
evalcond[4]=((((-1.0)*x839))+new_r10+x835);
evalcond[5]=((((-1.0)*x839))+new_r01+x835);
evalcond[6]=(((new_r00*x834))+(((-1.0)*cj9))+((new_r10*x833)));
evalcond[7]=((((-1.0)*x836))+(((-1.0)*x837))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x840=((1.0)*new_r11);
CheckValue<IkReal> x841 = IKatan2WithCheck(IkReal((((cj9*new_r01))+(((-1.0)*sj9*x840)))),IkReal(((((-1.0)*new_r01*sj9))+(((-1.0)*cj9*x840)))),IKFAST_ATAN2_MAGTHRESH);
if(!x841.valid){
continue;
}
CheckValue<IkReal> x842=IKPowWithIntegerCheck(IKsign(((new_r01*new_r01)+(new_r11*new_r11))),-1);
if(!x842.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x841.value)+(((1.5707963267949)*(x842.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x843=IKsin(j7);
IkReal x844=IKcos(j7);
IkReal x845=(sj9*x844);
IkReal x846=(sj9*x843);
IkReal x847=(cj9*x844);
IkReal x848=((1.0)*x843);
IkReal x849=(cj9*x848);
evalcond[0]=(sj9+((new_r01*x844))+((new_r11*x843)));
evalcond[1]=(new_r11+x847+x846);
evalcond[2]=(((new_r10*x844))+sj9+(((-1.0)*new_r00*x848)));
evalcond[3]=(cj9+(((-1.0)*new_r01*x848))+((new_r11*x844)));
evalcond[4]=((((-1.0)*x849))+new_r10+x845);
evalcond[5]=((((-1.0)*x849))+new_r01+x845);
evalcond[6]=(((new_r10*x843))+((new_r00*x844))+(((-1.0)*cj9)));
evalcond[7]=((((-1.0)*x846))+(((-1.0)*x847))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
IkReal x850=((1.0)*sj9);
CheckValue<IkReal> x851 = IKatan2WithCheck(IkReal((((new_r01*sj9))+(((-1.0)*new_r10*x850)))),IkReal(((((-1.0)*new_r00*x850))+(((-1.0)*new_r11*x850)))),IKFAST_ATAN2_MAGTHRESH);
if(!x851.valid){
continue;
}
CheckValue<IkReal> x852=IKPowWithIntegerCheck(IKsign((((new_r10*new_r11))+((new_r00*new_r01)))),-1);
if(!x852.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(x851.value)+(((1.5707963267949)*(x852.value))));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x853=IKsin(j7);
IkReal x854=IKcos(j7);
IkReal x855=(sj9*x854);
IkReal x856=(sj9*x853);
IkReal x857=(cj9*x854);
IkReal x858=((1.0)*x853);
IkReal x859=(cj9*x858);
evalcond[0]=(sj9+((new_r11*x853))+((new_r01*x854)));
evalcond[1]=(new_r11+x856+x857);
evalcond[2]=(sj9+(((-1.0)*new_r00*x858))+((new_r10*x854)));
evalcond[3]=(cj9+(((-1.0)*new_r01*x858))+((new_r11*x854)));
evalcond[4]=((((-1.0)*x859))+new_r10+x855);
evalcond[5]=((((-1.0)*x859))+new_r01+x855);
evalcond[6]=(((new_r10*x853))+((new_r00*x854))+(((-1.0)*cj9)));
evalcond[7]=((((-1.0)*x856))+(((-1.0)*x857))+new_r00);
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r12))+(IKabs(new_r02)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j7eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j7eval[0]=((IKabs(new_r10))+(IKabs(new_r00)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j7eval[0]=((IKabs(new_r11))+(IKabs(new_r01)));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
{
IkReal j7eval[1];
new_r02=0;
new_r12=0;
new_r20=0;
new_r21=0;
j7eval[0]=((IKabs((new_r10*new_r22)))+(IKabs((new_r00*new_r22))));
if( IKabs(j7eval[0]) < 0.0000010000000000  )
{
continue; // no branches [j7]

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x861 = IKatan2WithCheck(IkReal((new_r00*new_r22)),IkReal((new_r10*new_r22)),IKFAST_ATAN2_MAGTHRESH);
if(!x861.valid){
continue;
}
IkReal x860=x861.value;
j7array[0]=((-1.0)*x860);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x860)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x862=IKcos(j7);
IkReal x863=IKsin(j7);
IkReal x864=((1.0)*x863);
IkReal x865=(new_r11*x863);
IkReal x866=(new_r01*x862);
evalcond[0]=(((new_r00*x862))+((new_r10*x863)));
evalcond[1]=(x866+x865);
evalcond[2]=((((-1.0)*new_r00*x864))+((new_r10*x862)));
evalcond[3]=((((-1.0)*new_r01*x864))+((new_r11*x862)));
evalcond[4]=(((new_r22*x865))+((new_r22*x866)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x868 = IKatan2WithCheck(IkReal(new_r01),IkReal(new_r11),IKFAST_ATAN2_MAGTHRESH);
if(!x868.valid){
continue;
}
IkReal x867=x868.value;
j7array[0]=((-1.0)*x867);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x867)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x869=IKcos(j7);
IkReal x870=IKsin(j7);
IkReal x871=(new_r10*x870);
IkReal x872=(new_r00*x869);
IkReal x873=((1.0)*x870);
evalcond[0]=(x871+x872);
evalcond[1]=((((-1.0)*new_r00*x873))+((new_r10*x869)));
evalcond[2]=((((-1.0)*new_r01*x873))+((new_r11*x869)));
evalcond[3]=(((new_r22*x872))+((new_r22*x871)));
evalcond[4]=(((new_r11*new_r22*x870))+((new_r01*new_r22*x869)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[2], cj7array[2], sj7array[2];
bool j7valid[2]={false};
_nj7 = 2;
CheckValue<IkReal> x875 = IKatan2WithCheck(IkReal(new_r00),IkReal(new_r10),IKFAST_ATAN2_MAGTHRESH);
if(!x875.valid){
continue;
}
IkReal x874=x875.value;
j7array[0]=((-1.0)*x874);
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
j7array[1]=((3.14159265358979)+(((-1.0)*x874)));
sj7array[1]=IKsin(j7array[1]);
cj7array[1]=IKcos(j7array[1]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
if( j7array[1] > IKPI )
{
    j7array[1]-=IK2PI;
}
else if( j7array[1] < -IKPI )
{    j7array[1]+=IK2PI;
}
j7valid[1] = true;
for(int ij7 = 0; ij7 < 2; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 2; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[5];
IkReal x876=IKcos(j7);
IkReal x877=IKsin(j7);
IkReal x878=(new_r22*x877);
IkReal x879=(new_r22*x876);
IkReal x880=((1.0)*x877);
evalcond[0]=(((new_r01*x876))+((new_r11*x877)));
evalcond[1]=((((-1.0)*new_r00*x880))+((new_r10*x876)));
evalcond[2]=((((-1.0)*new_r01*x880))+((new_r11*x876)));
evalcond[3]=(((new_r00*x879))+((new_r10*x878)));
evalcond[4]=(((new_r01*x879))+((new_r11*x878)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j7]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x882=IKPowWithIntegerCheck(sj8,-1);
if(!x882.valid){
continue;
}
IkReal x881=x882.value;
CheckValue<IkReal> x883=IKPowWithIntegerCheck(new_r00,-1);
if(!x883.valid){
continue;
}
if( IKabs((x881*(x883.value)*((((sj8*sj9))+((new_r02*new_r10)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs((new_r02*x881)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((x881*(x883.value)*((((sj8*sj9))+((new_r02*new_r10))))))+IKsqr((new_r02*x881))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j7array[0]=IKatan2((x881*(x883.value)*((((sj8*sj9))+((new_r02*new_r10))))), (new_r02*x881));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[18];
IkReal x884=IKcos(j7);
IkReal x885=IKsin(j7);
IkReal x886=((1.0)*cj8);
IkReal x887=((1.0)*sj8);
IkReal x888=(new_r12*x885);
IkReal x889=(cj9*x884);
IkReal x890=((1.0)*x885);
IkReal x891=(new_r02*x884);
IkReal x892=(sj9*x884);
IkReal x893=(new_r11*x885);
IkReal x894=(cj8*x885);
IkReal x895=(new_r01*x884);
IkReal x896=(new_r00*x884);
evalcond[0]=(new_r02+(((-1.0)*x884*x887)));
evalcond[1]=(new_r12+(((-1.0)*x885*x887)));
evalcond[2]=(((new_r12*x884))+(((-1.0)*new_r02*x890)));
evalcond[3]=(sj9+((new_r10*x884))+(((-1.0)*new_r00*x890)));
evalcond[4]=(cj9+((new_r11*x884))+(((-1.0)*new_r01*x890)));
evalcond[5]=(((cj9*x894))+new_r10+x892);
evalcond[6]=((((-1.0)*x887))+x888+x891);
evalcond[7]=(((new_r10*x885))+x896+((cj8*cj9)));
evalcond[8]=((((-1.0)*sj9*x890))+new_r00+((cj8*x889)));
evalcond[9]=((((-1.0)*sj9*x885*x886))+new_r11+x889);
evalcond[10]=((((-1.0)*sj9*x886))+x895+x893);
evalcond[11]=((((-1.0)*cj9*x890))+new_r01+(((-1.0)*x886*x892)));
evalcond[12]=(((cj8*x888))+(((-1.0)*new_r22*x887))+((cj8*x891)));
evalcond[13]=(cj9+((new_r10*x894))+(((-1.0)*new_r20*x887))+((cj8*x896)));
evalcond[14]=((((-1.0)*new_r10*x885*x887))+(((-1.0)*new_r20*x886))+(((-1.0)*x887*x896)));
evalcond[15]=((((-1.0)*new_r21*x886))+(((-1.0)*x887*x893))+(((-1.0)*x887*x895)));
evalcond[16]=((1.0)+(((-1.0)*x887*x888))+(((-1.0)*new_r22*x886))+(((-1.0)*x887*x891)));
evalcond[17]=((((-1.0)*sj9))+(((-1.0)*new_r21*x887))+((cj8*x893))+((cj8*x895)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x897=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x897.valid){
continue;
}
CheckValue<IkReal> x898 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x898.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x897.value)))+(x898.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[18];
IkReal x899=IKcos(j7);
IkReal x900=IKsin(j7);
IkReal x901=((1.0)*cj8);
IkReal x902=((1.0)*sj8);
IkReal x903=(new_r12*x900);
IkReal x904=(cj9*x899);
IkReal x905=((1.0)*x900);
IkReal x906=(new_r02*x899);
IkReal x907=(sj9*x899);
IkReal x908=(new_r11*x900);
IkReal x909=(cj8*x900);
IkReal x910=(new_r01*x899);
IkReal x911=(new_r00*x899);
evalcond[0]=(new_r02+(((-1.0)*x899*x902)));
evalcond[1]=((((-1.0)*x900*x902))+new_r12);
evalcond[2]=((((-1.0)*new_r02*x905))+((new_r12*x899)));
evalcond[3]=(sj9+((new_r10*x899))+(((-1.0)*new_r00*x905)));
evalcond[4]=(((new_r11*x899))+cj9+(((-1.0)*new_r01*x905)));
evalcond[5]=(((cj9*x909))+new_r10+x907);
evalcond[6]=((((-1.0)*x902))+x906+x903);
evalcond[7]=(((new_r10*x900))+x911+((cj8*cj9)));
evalcond[8]=((((-1.0)*sj9*x905))+new_r00+((cj8*x904)));
evalcond[9]=((((-1.0)*sj9*x900*x901))+new_r11+x904);
evalcond[10]=((((-1.0)*sj9*x901))+x910+x908);
evalcond[11]=((((-1.0)*x901*x907))+new_r01+(((-1.0)*cj9*x905)));
evalcond[12]=(((cj8*x906))+((cj8*x903))+(((-1.0)*new_r22*x902)));
evalcond[13]=(((cj8*x911))+(((-1.0)*new_r20*x902))+cj9+((new_r10*x909)));
evalcond[14]=((((-1.0)*new_r10*x900*x902))+(((-1.0)*new_r20*x901))+(((-1.0)*x902*x911)));
evalcond[15]=((((-1.0)*x902*x908))+(((-1.0)*new_r21*x901))+(((-1.0)*x902*x910)));
evalcond[16]=((1.0)+(((-1.0)*x902*x903))+(((-1.0)*x902*x906))+(((-1.0)*new_r22*x901)));
evalcond[17]=(((cj8*x910))+(((-1.0)*sj9))+(((-1.0)*new_r21*x902))+((cj8*x908)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[12]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[13]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[14]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[15]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[16]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[17]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}

} else
{
{
IkReal j7array[1], cj7array[1], sj7array[1];
bool j7valid[1]={false};
_nj7 = 1;
CheckValue<IkReal> x912=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x912.valid){
continue;
}
CheckValue<IkReal> x913 = IKatan2WithCheck(IkReal(new_r12),IkReal(new_r02),IKFAST_ATAN2_MAGTHRESH);
if(!x913.valid){
continue;
}
j7array[0]=((-1.5707963267949)+(((1.5707963267949)*(x912.value)))+(x913.value));
sj7array[0]=IKsin(j7array[0]);
cj7array[0]=IKcos(j7array[0]);
if( j7array[0] > IKPI )
{
    j7array[0]-=IK2PI;
}
else if( j7array[0] < -IKPI )
{    j7array[0]+=IK2PI;
}
j7valid[0] = true;
for(int ij7 = 0; ij7 < 1; ++ij7)
{
if( !j7valid[ij7] )
{
    continue;
}
_ij7[0] = ij7; _ij7[1] = -1;
for(int iij7 = ij7+1; iij7 < 1; ++iij7)
{
if( j7valid[iij7] && IKabs(cj7array[ij7]-cj7array[iij7]) < IKFAST_SOLUTION_THRESH && IKabs(sj7array[ij7]-sj7array[iij7]) < IKFAST_SOLUTION_THRESH )
{
    j7valid[iij7]=false; _ij7[1] = iij7; break; 
}
}
j7 = j7array[ij7]; cj7 = cj7array[ij7]; sj7 = sj7array[ij7];
{
IkReal evalcond[8];
IkReal x914=IKcos(j7);
IkReal x915=IKsin(j7);
IkReal x916=((1.0)*cj8);
IkReal x917=((1.0)*sj8);
IkReal x918=(new_r02*x914);
IkReal x919=(new_r12*x915);
IkReal x920=((1.0)*x915);
IkReal x921=(x914*x917);
evalcond[0]=((((-1.0)*x921))+new_r02);
evalcond[1]=(new_r12+(((-1.0)*x915*x917)));
evalcond[2]=((((-1.0)*new_r02*x920))+((new_r12*x914)));
evalcond[3]=((((-1.0)*x917))+x919+x918);
evalcond[4]=((((-1.0)*new_r22*x917))+((cj8*x918))+((cj8*x919)));
evalcond[5]=((((-1.0)*new_r20*x916))+(((-1.0)*new_r00*x921))+(((-1.0)*new_r10*x915*x917)));
evalcond[6]=((((-1.0)*new_r21*x916))+(((-1.0)*new_r11*x915*x917))+(((-1.0)*new_r01*x921)));
evalcond[7]=((1.0)+(((-1.0)*new_r22*x916))+(((-1.0)*x917*x919))+(((-1.0)*x917*x918)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
IkReal j9eval[3];
j9eval[0]=sj8;
j9eval[1]=IKsign(sj8);
j9eval[2]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal j9eval[2];
j9eval[0]=sj8;
j9eval[1]=cj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  )
{
{
IkReal j9eval[3];
j9eval[0]=sj8;
j9eval[1]=cj8;
j9eval[2]=sj7;
if( IKabs(j9eval[0]) < 0.0000010000000000  || IKabs(j9eval[1]) < 0.0000010000000000  || IKabs(j9eval[2]) < 0.0000010000000000  )
{
{
IkReal evalcond[5];
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j8))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x922=((1.0)*new_r10);
if( IKabs((((new_r00*sj7))+(((-1.0)*cj7*x922)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(((((-1.0)*cj7*new_r00))+(((-1.0)*sj7*x922)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr((((new_r00*sj7))+(((-1.0)*cj7*x922))))+IKsqr(((((-1.0)*cj7*new_r00))+(((-1.0)*sj7*x922))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2((((new_r00*sj7))+(((-1.0)*cj7*x922))), ((((-1.0)*cj7*new_r00))+(((-1.0)*sj7*x922))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x923=IKcos(j9);
IkReal x924=IKsin(j9);
IkReal x925=((1.0)*sj7);
IkReal x926=(cj7*x923);
IkReal x927=((1.0)*x924);
IkReal x928=(x924*x925);
evalcond[0]=(((new_r10*sj7))+x923+((cj7*new_r00)));
evalcond[1]=((((-1.0)*new_r00*x925))+x924+((cj7*new_r10)));
evalcond[2]=((((-1.0)*new_r01*x925))+x923+((cj7*new_r11)));
evalcond[3]=(((cj7*x924))+new_r10+((sj7*x923)));
evalcond[4]=((((-1.0)*x927))+((new_r11*sj7))+((cj7*new_r01)));
evalcond[5]=((((-1.0)*x928))+new_r00+x926);
evalcond[6]=((((-1.0)*x928))+new_r11+x926);
evalcond[7]=(new_r01+(((-1.0)*cj7*x927))+(((-1.0)*x923*x925)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j8)))), 6.28318530717959)));
evalcond[1]=new_r21;
evalcond[2]=new_r02;
evalcond[3]=new_r12;
evalcond[4]=new_r20;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  && IKabs(evalcond[2]) < 0.0000050000000000  && IKabs(evalcond[3]) < 0.0000050000000000  && IKabs(evalcond[4]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
IkReal x929=((1.0)*new_r11);
if( IKabs(((((-1.0)*cj7*new_r10))+(((-1.0)*sj7*x929)))) < IKFAST_ATAN2_MAGTHRESH && IKabs((((new_r10*sj7))+(((-1.0)*cj7*x929)))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((((-1.0)*cj7*new_r10))+(((-1.0)*sj7*x929))))+IKsqr((((new_r10*sj7))+(((-1.0)*cj7*x929))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((((-1.0)*cj7*new_r10))+(((-1.0)*sj7*x929))), (((new_r10*sj7))+(((-1.0)*cj7*x929))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x930=IKsin(j9);
IkReal x931=IKcos(j9);
IkReal x932=((1.0)*sj7);
IkReal x933=(cj7*x930);
IkReal x934=((1.0)*x931);
IkReal x935=(sj7*x930);
IkReal x936=(x931*x932);
evalcond[0]=(((new_r11*sj7))+x930+((cj7*new_r01)));
evalcond[1]=((((-1.0)*new_r00*x932))+x930+((cj7*new_r10)));
evalcond[2]=((((-1.0)*new_r01*x932))+x931+((cj7*new_r11)));
evalcond[3]=(((new_r10*sj7))+((cj7*new_r00))+(((-1.0)*x934)));
evalcond[4]=(((cj7*x931))+new_r11+x935);
evalcond[5]=(new_r10+x933+(((-1.0)*x936)));
evalcond[6]=(new_r01+x933+(((-1.0)*x936)));
evalcond[7]=((((-1.0)*x930*x932))+new_r00+(((-1.0)*cj7*x934)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r21)) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r20) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21))+IKsqr(new_r20)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r21), new_r20);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x937=IKsin(j9);
IkReal x938=IKcos(j9);
IkReal x939=((1.0)*sj7);
evalcond[0]=(new_r21+x937);
evalcond[1]=((((-1.0)*x938))+new_r20);
evalcond[2]=(((cj7*x937))+new_r10);
evalcond[3]=(((cj7*x938))+new_r11);
evalcond[4]=((((-1.0)*x937*x939))+new_r00);
evalcond[5]=((((-1.0)*x938*x939))+new_r01);
evalcond[6]=((((-1.0)*new_r00*x939))+x937+((cj7*new_r10)));
evalcond[7]=((((-1.0)*new_r01*x939))+x938+((cj7*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j8)))), 6.28318530717959)));
evalcond[1]=new_r22;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r21) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r20)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r21)+IKsqr(((-1.0)*new_r20))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r21, ((-1.0)*new_r20));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x940=IKsin(j9);
IkReal x941=IKcos(j9);
IkReal x942=((1.0)*sj7);
evalcond[0]=(new_r20+x941);
evalcond[1]=((((-1.0)*x940))+new_r21);
evalcond[2]=(((cj7*x940))+new_r10);
evalcond[3]=(((cj7*x941))+new_r11);
evalcond[4]=(new_r00+(((-1.0)*x940*x942)));
evalcond[5]=((((-1.0)*x941*x942))+new_r01);
evalcond[6]=((((-1.0)*new_r00*x942))+x940+((cj7*new_r10)));
evalcond[7]=((((-1.0)*new_r01*x942))+x941+((cj7*new_r11)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(j7))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r10)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r11)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r10))+IKsqr(((-1.0)*new_r11))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r10), ((-1.0)*new_r11));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x943=IKsin(j9);
IkReal x944=IKcos(j9);
IkReal x945=((1.0)*sj8);
IkReal x946=((1.0)*x943);
evalcond[0]=(new_r10+x943);
evalcond[1]=(new_r11+x944);
evalcond[2]=(((sj8*x943))+new_r21);
evalcond[3]=(((cj8*x944))+new_r00);
evalcond[4]=((((-1.0)*x944*x945))+new_r20);
evalcond[5]=((((-1.0)*cj8*x946))+new_r01);
evalcond[6]=((((-1.0)*new_r20*x945))+((cj8*new_r00))+x944);
evalcond[7]=((((-1.0)*x946))+(((-1.0)*new_r21*x945))+((cj8*new_r01)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-3.14159265358979)+j7)))), 6.28318530717959)));
evalcond[1]=new_r12;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r10) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r11) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r10)+IKsqr(new_r11)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r10, new_r11);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x947=IKsin(j9);
IkReal x948=IKcos(j9);
IkReal x949=((1.0)*cj8);
IkReal x950=((1.0)*sj8);
evalcond[0]=(((sj8*x947))+new_r21);
evalcond[1]=((((-1.0)*new_r10))+x947);
evalcond[2]=((((-1.0)*new_r11))+x948);
evalcond[3]=(new_r20+(((-1.0)*x948*x950)));
evalcond[4]=(((cj8*x948))+(((-1.0)*new_r00)));
evalcond[5]=((((-1.0)*x947*x949))+(((-1.0)*new_r01)));
evalcond[6]=((((-1.0)*new_r00*x949))+x948+(((-1.0)*new_r20*x950)));
evalcond[7]=((((-1.0)*new_r21*x950))+(((-1.0)*x947))+(((-1.0)*new_r01*x949)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((-1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(new_r00) < IKFAST_ATAN2_MAGTHRESH && IKabs(new_r01) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(new_r00)+IKsqr(new_r01)-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(new_r00, new_r01);
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x951=IKsin(j9);
IkReal x952=IKcos(j9);
IkReal x953=((1.0)*sj8);
IkReal x954=((1.0)*x951);
evalcond[0]=(((sj8*x951))+new_r21);
evalcond[1]=((((-1.0)*new_r00))+x951);
evalcond[2]=((((-1.0)*new_r01))+x952);
evalcond[3]=(((cj8*x952))+new_r10);
evalcond[4]=(new_r20+(((-1.0)*x952*x953)));
evalcond[5]=((((-1.0)*cj8*x954))+new_r11);
evalcond[6]=(((cj8*new_r10))+x952+(((-1.0)*new_r20*x953)));
evalcond[7]=((((-1.0)*new_r21*x953))+((cj8*new_r11))+(((-1.0)*x954)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((-3.14159265358979)+(IKfmod(((3.14159265358979)+(IKabs(((1.5707963267949)+j7)))), 6.28318530717959)));
evalcond[1]=new_r02;
if( IKabs(evalcond[0]) < 0.0000050000000000  && IKabs(evalcond[1]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
if( IKabs(((-1.0)*new_r00)) < IKFAST_ATAN2_MAGTHRESH && IKabs(((-1.0)*new_r01)) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r00))+IKsqr(((-1.0)*new_r01))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r00), ((-1.0)*new_r01));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[8];
IkReal x955=IKsin(j9);
IkReal x956=IKcos(j9);
IkReal x957=((1.0)*cj8);
IkReal x958=((1.0)*sj8);
evalcond[0]=(new_r00+x955);
evalcond[1]=(new_r01+x956);
evalcond[2]=(((sj8*x955))+new_r21);
evalcond[3]=((((-1.0)*x956*x958))+new_r20);
evalcond[4]=(((cj8*x956))+(((-1.0)*new_r10)));
evalcond[5]=((((-1.0)*new_r11))+(((-1.0)*x955*x957)));
evalcond[6]=((((-1.0)*new_r10*x957))+x956+(((-1.0)*new_r20*x958)));
evalcond[7]=((((-1.0)*new_r21*x958))+(((-1.0)*x955))+(((-1.0)*new_r11*x957)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
evalcond[0]=((IKabs(new_r20))+(IKabs(new_r21)));
if( IKabs(evalcond[0]) < 0.0000050000000000  )
{
bgotonextstatement=false;
{
IkReal j9eval[1];
new_r21=0;
new_r20=0;
new_r02=0;
new_r12=0;
j9eval[0]=IKabs(new_r22);
if( IKabs(j9eval[0]) < 0.0000000100000000  )
{
continue; // no branches [j9]

} else
{
IkReal op[2+1], zeror[2];
int numroots;
op[0]=((-1.0)*new_r22);
op[1]=0;
op[2]=new_r22;
polyroots2(op,zeror,numroots);
IkReal j9array[2], cj9array[2], sj9array[2], tempj9array[1];
int numsolutions = 0;
for(int ij9 = 0; ij9 < numroots; ++ij9)
{
IkReal htj9 = zeror[ij9];
tempj9array[0]=((2.0)*(atan(htj9)));
for(int kj9 = 0; kj9 < 1; ++kj9)
{
j9array[numsolutions] = tempj9array[kj9];
if( j9array[numsolutions] > IKPI )
{
    j9array[numsolutions]-=IK2PI;
}
else if( j9array[numsolutions] < -IKPI )
{
    j9array[numsolutions]+=IK2PI;
}
sj9array[numsolutions] = IKsin(j9array[numsolutions]);
cj9array[numsolutions] = IKcos(j9array[numsolutions]);
numsolutions++;
}
}
bool j9valid[2]={true,true};
_nj9 = 2;
for(int ij9 = 0; ij9 < numsolutions; ++ij9)
    {
if( !j9valid[ij9] )
{
    continue;
}
    j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
htj9 = IKtan(j9/2);

_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < numsolutions; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
    }

}

}

}
} while(0);
if( bgotonextstatement )
{
bool bgotonextstatement = true;
do
{
if( 1 )
{
bgotonextstatement=false;
continue; // branch miss [j9]

}
} while(0);
if( bgotonextstatement )
{
}
}
}
}
}
}
}
}
}
}
}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x960=IKPowWithIntegerCheck(sj8,-1);
if(!x960.valid){
continue;
}
IkReal x959=x960.value;
CheckValue<IkReal> x961=IKPowWithIntegerCheck(cj8,-1);
if(!x961.valid){
continue;
}
CheckValue<IkReal> x962=IKPowWithIntegerCheck(sj7,-1);
if(!x962.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x959)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x959*(x961.value)*(x962.value)*((((cj7*new_r21))+(((-1.0)*new_r10*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x959))+IKsqr((x959*(x961.value)*(x962.value)*((((cj7*new_r21))+(((-1.0)*new_r10*sj8))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r21*x959), (x959*(x961.value)*(x962.value)*((((cj7*new_r21))+(((-1.0)*new_r10*sj8))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x963=IKsin(j9);
IkReal x964=IKcos(j9);
IkReal x965=((1.0)*sj7);
IkReal x966=((1.0)*sj8);
IkReal x967=(cj7*new_r01);
IkReal x968=(new_r10*sj7);
IkReal x969=(new_r11*sj7);
IkReal x970=(cj7*cj8);
IkReal x971=(cj7*x964);
IkReal x972=((1.0)*x963);
IkReal x973=(cj8*x964);
evalcond[0]=(((sj8*x963))+new_r21);
evalcond[1]=((((-1.0)*x964*x966))+new_r20);
evalcond[2]=((((-1.0)*new_r00*x965))+x963+((cj7*new_r10)));
evalcond[3]=((((-1.0)*new_r01*x965))+x964+((cj7*new_r11)));
evalcond[4]=(x973+x968+((cj7*new_r00)));
evalcond[5]=(((sj7*x973))+new_r10+((cj7*x963)));
evalcond[6]=((((-1.0)*cj8*x972))+x967+x969);
evalcond[7]=((((-1.0)*x963*x965))+((x964*x970))+new_r00);
evalcond[8]=((((-1.0)*cj8*x963*x965))+new_r11+x971);
evalcond[9]=((((-1.0)*x964*x965))+(((-1.0)*x970*x972))+new_r01);
evalcond[10]=(((cj8*x968))+x964+(((-1.0)*new_r20*x966))+((new_r00*x970)));
evalcond[11]=((((-1.0)*new_r21*x966))+((cj8*x967))+((cj8*x969))+(((-1.0)*x972)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x975=IKPowWithIntegerCheck(sj8,-1);
if(!x975.valid){
continue;
}
IkReal x974=x975.value;
CheckValue<IkReal> x976=IKPowWithIntegerCheck(cj7,-1);
if(!x976.valid){
continue;
}
if( IKabs(((-1.0)*new_r21*x974)) < IKFAST_ATAN2_MAGTHRESH && IKabs((x974*(x976.value)*(((((-1.0)*cj8*new_r21*sj7))+(((-1.0)*new_r11*sj8)))))) < IKFAST_ATAN2_MAGTHRESH && IKabs(IKsqr(((-1.0)*new_r21*x974))+IKsqr((x974*(x976.value)*(((((-1.0)*cj8*new_r21*sj7))+(((-1.0)*new_r11*sj8))))))-1) <= IKFAST_SINCOS_THRESH )
    continue;
j9array[0]=IKatan2(((-1.0)*new_r21*x974), (x974*(x976.value)*(((((-1.0)*cj8*new_r21*sj7))+(((-1.0)*new_r11*sj8))))));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x977=IKsin(j9);
IkReal x978=IKcos(j9);
IkReal x979=((1.0)*sj7);
IkReal x980=((1.0)*sj8);
IkReal x981=(cj7*new_r01);
IkReal x982=(new_r10*sj7);
IkReal x983=(new_r11*sj7);
IkReal x984=(cj7*cj8);
IkReal x985=(cj7*x978);
IkReal x986=((1.0)*x977);
IkReal x987=(cj8*x978);
evalcond[0]=(((sj8*x977))+new_r21);
evalcond[1]=((((-1.0)*x978*x980))+new_r20);
evalcond[2]=((((-1.0)*new_r00*x979))+x977+((cj7*new_r10)));
evalcond[3]=((((-1.0)*new_r01*x979))+x978+((cj7*new_r11)));
evalcond[4]=(x987+x982+((cj7*new_r00)));
evalcond[5]=(((cj7*x977))+((sj7*x987))+new_r10);
evalcond[6]=((((-1.0)*cj8*x986))+x981+x983);
evalcond[7]=(new_r00+(((-1.0)*x977*x979))+((x978*x984)));
evalcond[8]=((((-1.0)*cj8*x977*x979))+new_r11+x985);
evalcond[9]=((((-1.0)*x978*x979))+(((-1.0)*x984*x986))+new_r01);
evalcond[10]=(((new_r00*x984))+(((-1.0)*new_r20*x980))+((cj8*x982))+x978);
evalcond[11]=((((-1.0)*new_r21*x980))+(((-1.0)*x986))+((cj8*x981))+((cj8*x983)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}

} else
{
{
IkReal j9array[1], cj9array[1], sj9array[1];
bool j9valid[1]={false};
_nj9 = 1;
CheckValue<IkReal> x988=IKPowWithIntegerCheck(IKsign(sj8),-1);
if(!x988.valid){
continue;
}
CheckValue<IkReal> x989 = IKatan2WithCheck(IkReal(((-1.0)*new_r21)),IkReal(new_r20),IKFAST_ATAN2_MAGTHRESH);
if(!x989.valid){
continue;
}
j9array[0]=((-1.5707963267949)+(((1.5707963267949)*(x988.value)))+(x989.value));
sj9array[0]=IKsin(j9array[0]);
cj9array[0]=IKcos(j9array[0]);
if( j9array[0] > IKPI )
{
    j9array[0]-=IK2PI;
}
else if( j9array[0] < -IKPI )
{    j9array[0]+=IK2PI;
}
j9valid[0] = true;
for(int ij9 = 0; ij9 < 1; ++ij9)
{
if( !j9valid[ij9] )
{
    continue;
}
_ij9[0] = ij9; _ij9[1] = -1;
for(int iij9 = ij9+1; iij9 < 1; ++iij9)
{
if( j9valid[iij9] && IKabs(cj9array[ij9]-cj9array[iij9]) < IKFAST_SOLUTION_THRESH && IKabs(sj9array[ij9]-sj9array[iij9]) < IKFAST_SOLUTION_THRESH )
{
    j9valid[iij9]=false; _ij9[1] = iij9; break; 
}
}
j9 = j9array[ij9]; cj9 = cj9array[ij9]; sj9 = sj9array[ij9];
{
IkReal evalcond[12];
IkReal x990=IKsin(j9);
IkReal x991=IKcos(j9);
IkReal x992=((1.0)*sj7);
IkReal x993=((1.0)*sj8);
IkReal x994=(cj7*new_r01);
IkReal x995=(new_r10*sj7);
IkReal x996=(new_r11*sj7);
IkReal x997=(cj7*cj8);
IkReal x998=(cj7*x991);
IkReal x999=((1.0)*x990);
IkReal x1000=(cj8*x991);
evalcond[0]=(((sj8*x990))+new_r21);
evalcond[1]=((((-1.0)*x991*x993))+new_r20);
evalcond[2]=((((-1.0)*new_r00*x992))+x990+((cj7*new_r10)));
evalcond[3]=((((-1.0)*new_r01*x992))+x991+((cj7*new_r11)));
evalcond[4]=(x1000+x995+((cj7*new_r00)));
evalcond[5]=(((cj7*x990))+new_r10+((sj7*x1000)));
evalcond[6]=((((-1.0)*cj8*x999))+x996+x994);
evalcond[7]=(((x991*x997))+(((-1.0)*x990*x992))+new_r00);
evalcond[8]=((((-1.0)*cj8*x990*x992))+new_r11+x998);
evalcond[9]=((((-1.0)*x991*x992))+(((-1.0)*x997*x999))+new_r01);
evalcond[10]=((((-1.0)*new_r20*x993))+((new_r00*x997))+x991+((cj8*x995)));
evalcond[11]=((((-1.0)*x999))+(((-1.0)*new_r21*x993))+((cj8*x996))+((cj8*x994)));
if( IKabs(evalcond[0]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[1]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[2]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[3]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[4]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[5]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[6]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[7]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[8]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[9]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[10]) > IKFAST_EVALCOND_THRESH  || IKabs(evalcond[11]) > IKFAST_EVALCOND_THRESH  )
{
continue;
}
}

{
std::vector<IkSingleDOFSolutionBase<IkReal> > vinfos(7);
vinfos[0].jointtype = 1;
vinfos[0].foffset = j7;
vinfos[0].indices[0] = _ij7[0];
vinfos[0].indices[1] = _ij7[1];
vinfos[0].maxsolutions = _nj7;
vinfos[1].jointtype = 1;
vinfos[1].foffset = j8;
vinfos[1].indices[0] = _ij8[0];
vinfos[1].indices[1] = _ij8[1];
vinfos[1].maxsolutions = _nj8;
vinfos[2].jointtype = 1;
vinfos[2].foffset = j9;
vinfos[2].indices[0] = _ij9[0];
vinfos[2].indices[1] = _ij9[1];
vinfos[2].maxsolutions = _nj9;
vinfos[3].jointtype = 1;
vinfos[3].foffset = j10;
vinfos[3].indices[0] = _ij10[0];
vinfos[3].indices[1] = _ij10[1];
vinfos[3].maxsolutions = _nj10;
vinfos[4].jointtype = 1;
vinfos[4].foffset = j11;
vinfos[4].indices[0] = _ij11[0];
vinfos[4].indices[1] = _ij11[1];
vinfos[4].maxsolutions = _nj11;
vinfos[5].jointtype = 1;
vinfos[5].foffset = j12;
vinfos[5].indices[0] = _ij12[0];
vinfos[5].indices[1] = _ij12[1];
vinfos[5].maxsolutions = _nj12;
vinfos[6].jointtype = 1;
vinfos[6].foffset = j13;
vinfos[6].indices[0] = _ij13[0];
vinfos[6].indices[1] = _ij13[1];
vinfos[6].maxsolutions = _nj13;
std::vector<int> vfree(0);
solutions.AddSolution(vinfos,vfree);
}
}
}

}

}
}
}

}

}
}
}
}
}static inline void polyroots3(IkReal rawcoeffs[3+1], IkReal rawroots[3], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots2(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[3];
    const int maxsteps = 110;
    for(int i = 0; i < 3; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[3];
    IkReal err[3];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 3; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 3; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 3; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 3; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[3] = {false};
    for(int i = 0; i < 3; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 3; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
static inline void polyroots2(IkReal rawcoeffs[2+1], IkReal rawroots[2], int& numroots) {
    IkReal det = rawcoeffs[1]*rawcoeffs[1]-4*rawcoeffs[0]*rawcoeffs[2];
    if( det < 0 ) {
        numroots=0;
    }
    else if( det == 0 ) {
        rawroots[0] = -0.5*rawcoeffs[1]/rawcoeffs[0];
        numroots = 1;
    }
    else {
        det = IKsqrt(det);
        rawroots[0] = (-rawcoeffs[1]+det)/(2*rawcoeffs[0]);
        rawroots[1] = (-rawcoeffs[1]-det)/(2*rawcoeffs[0]);//rawcoeffs[2]/(rawcoeffs[0]*rawroots[0]);
        numroots = 2;
    }
}
static inline void polyroots4(IkReal rawcoeffs[4+1], IkReal rawroots[4], int& numroots)
{
    using std::complex;
    if( rawcoeffs[0] == 0 ) {
        // solve with one reduced degree
        polyroots3(&rawcoeffs[1], &rawroots[0], numroots);
        return;
    }
    IKFAST_ASSERT(rawcoeffs[0] != 0);
    const IkReal tol = 128.0*std::numeric_limits<IkReal>::epsilon();
    const IkReal tolsqrt = sqrt(std::numeric_limits<IkReal>::epsilon());
    complex<IkReal> coeffs[4];
    const int maxsteps = 110;
    for(int i = 0; i < 4; ++i) {
        coeffs[i] = complex<IkReal>(rawcoeffs[i+1]/rawcoeffs[0]);
    }
    complex<IkReal> roots[4];
    IkReal err[4];
    roots[0] = complex<IkReal>(1,0);
    roots[1] = complex<IkReal>(0.4,0.9); // any complex number not a root of unity works
    err[0] = 1.0;
    err[1] = 1.0;
    for(int i = 2; i < 4; ++i) {
        roots[i] = roots[i-1]*roots[1];
        err[i] = 1.0;
    }
    for(int step = 0; step < maxsteps; ++step) {
        bool changed = false;
        for(int i = 0; i < 4; ++i) {
            if ( err[i] >= tol ) {
                changed = true;
                // evaluate
                complex<IkReal> x = roots[i] + coeffs[0];
                for(int j = 1; j < 4; ++j) {
                    x = roots[i] * x + coeffs[j];
                }
                for(int j = 0; j < 4; ++j) {
                    if( i != j ) {
                        if( roots[i] != roots[j] ) {
                            x /= (roots[i] - roots[j]);
                        }
                    }
                }
                roots[i] -= x;
                err[i] = abs(x);
            }
        }
        if( !changed ) {
            break;
        }
    }

    numroots = 0;
    bool visited[4] = {false};
    for(int i = 0; i < 4; ++i) {
        if( !visited[i] ) {
            // might be a multiple root, in which case it will have more error than the other roots
            // find any neighboring roots, and take the average
            complex<IkReal> newroot=roots[i];
            int n = 1;
            for(int j = i+1; j < 4; ++j) {
                // care about error in real much more than imaginary
                if( abs(real(roots[i])-real(roots[j])) < tolsqrt && abs(imag(roots[i])-imag(roots[j])) < 0.002 ) {
                    newroot += roots[j];
                    n += 1;
                    visited[j] = true;
                }
            }
            if( n > 1 ) {
                newroot /= n;
            }
            // there are still cases where even the mean is not accurate enough, until a better multi-root algorithm is used, need to use the sqrt
            if( IKabs(imag(newroot)) < tolsqrt ) {
                rawroots[numroots++] = real(newroot);
            }
        }
    }
}
};


/// solves the inverse kinematics equations.
/// \param pfree is an array specifying the free joints of the chain.
IKFAST_API bool ComputeIk(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API bool ComputeIk2(const IkReal* eetrans, const IkReal* eerot, const IkReal* pfree, IkSolutionListBase<IkReal>& solutions, void* pOpenRAVEManip) {
IKSolver solver;
return solver.ComputeIk(eetrans,eerot,pfree,solutions);
}

IKFAST_API const char* GetKinematicsHash() { return "<robot:GenericRobot - iiwa (bbd103fde4f322f7c0763c45ea3cc377)>"; }

IKFAST_API const char* GetIkFastVersion() { return "0x10000049"; }

#ifdef IKFAST_NAMESPACE
} // end namespace
#endif

#ifndef IKFAST_NO_MAIN
#include <stdio.h>
#include <stdlib.h>
#ifdef IKFAST_NAMESPACE
using namespace IKFAST_NAMESPACE;
#endif
int main(int argc, char** argv)
{
    if( argc != 12+GetNumFreeParameters()+1 ) {
        printf("\nUsage: ./ik r00 r01 r02 t0 r10 r11 r12 t1 r20 r21 r22 t2 free0 ...\n\n"
               "Returns the ik solutions given the transformation of the end effector specified by\n"
               "a 3x3 rotation R (rXX), and a 3x1 translation (tX).\n"
               "There are %d free parameters that have to be specified.\n\n",GetNumFreeParameters());
        return 1;
    }

    IkSolutionList<IkReal> solutions;
    std::vector<IkReal> vfree(GetNumFreeParameters());
    IkReal eerot[9],eetrans[3];
    eerot[0] = atof(argv[1]); eerot[1] = atof(argv[2]); eerot[2] = atof(argv[3]); eetrans[0] = atof(argv[4]);
    eerot[3] = atof(argv[5]); eerot[4] = atof(argv[6]); eerot[5] = atof(argv[7]); eetrans[1] = atof(argv[8]);
    eerot[6] = atof(argv[9]); eerot[7] = atof(argv[10]); eerot[8] = atof(argv[11]); eetrans[2] = atof(argv[12]);
    for(std::size_t i = 0; i < vfree.size(); ++i)
        vfree[i] = atof(argv[13+i]);
    bool bSuccess = ComputeIk(eetrans, eerot, vfree.size() > 0 ? &vfree[0] : NULL, solutions);

    if( !bSuccess ) {
        fprintf(stderr,"Failed to get ik solution\n");
        return -1;
    }

    printf("Found %d ik solutions:\n", (int)solutions.GetNumSolutions());
    std::vector<IkReal> solvalues(GetNumJoints());
    for(std::size_t i = 0; i < solutions.GetNumSolutions(); ++i) {
        const IkSolutionBase<IkReal>& sol = solutions.GetSolution(i);
        printf("sol%d (free=%d): ", (int)i, (int)sol.GetFree().size());
        std::vector<IkReal> vsolfree(sol.GetFree().size());
        sol.GetSolution(&solvalues[0],vsolfree.size()>0?&vsolfree[0]:NULL);
        for( std::size_t j = 0; j < solvalues.size(); ++j)
            printf("%.15f, ", solvalues[j]);
        printf("\n");
    }
    return 0;
}

#endif
